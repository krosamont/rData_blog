<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rData.lu - Specialized in data science training and expertise</title>
    <link>/</link>
    <description>Recent content on rData.lu - Specialized in data science training and expertise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) rData.lu. All rights reserved. &lt;br&gt; Content reblogged by &lt;a href=&#39;https://www.r-bloggers.com/&#39; target=&#39;_blank&#39;&gt;R-bloggers&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 21 Dec 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Skip errors in R loops by not writing loops</title>
      <link>/post/2017-12-21-skip-errors-in-r-by-not-writing-loops/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-21-skip-errors-in-r-by-not-writing-loops/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/images/loops_error.jpg&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;You probably have encountered situations similar to this one:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result = vector(&amp;quot;list&amp;quot;, length(some_numbers))

for(i in seq_along(some_numbers)){
  result[[i]] = some_function(some_numbers[[i]])
}

print(result)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First I initialize &lt;code&gt;result&lt;/code&gt;, an empty list of size equal to the length of &lt;code&gt;some_numbers&lt;/code&gt; which will contains the results of applying &lt;code&gt;some_function()&lt;/code&gt; to each element of &lt;code&gt;some_numbers&lt;/code&gt;. Then, using a for loop, I apply the function. This is what I get back:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NaNs producedError in sqrt(x) : non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at &lt;code&gt;some_numbers&lt;/code&gt; and &lt;code&gt;some_function()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(some_numbers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] -1.9
## 
## [[2]]
## [1] 20
## 
## [[3]]
## [1] &amp;quot;-88&amp;quot;
## 
## [[4]]
## [1] -42&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;some_function&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function(x){
##   if(x == 0) res = 0
##   if(x &amp;lt; 0) res = -sqrt(-x)
##   if(x &amp;gt; 0) res = sqrt(x)
##   return(res)
## }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the function simply returns the square root of &lt;code&gt;x&lt;/code&gt; (or minus the square root of &lt;code&gt;-x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is negative), but the number in third position of the list &lt;code&gt;some_numbers&lt;/code&gt; is actually a character. This type of mistakes can commonly happen. The &lt;code&gt;result&lt;/code&gt; list looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
[1] -1.378405

[[2]]
[1] 4.472136

[[3]]
NULL

[[4]]
NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, even though the fourth element could have been computed, the error made the whole loop stop. In such a simple example, you could correct this and then run your function. But what if the list you want to apply your function to is very long and the computation take a very, very long time? Perhaps you simply want to skip these errors and get back to them later. One way of doing that is using &lt;code&gt;tryCatch()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result = vector(&amp;quot;list&amp;quot;, length(some_numbers))

for(i in seq_along(some_numbers)){
  result[[i]] = tryCatch(some_function(some_numbers[[i]]), 
                         error = function(e) paste(&amp;quot;something wrong here&amp;quot;))
}

print(result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] -1.378405
## 
## [[2]]
## [1] 4.472136
## 
## [[3]]
## [1] &amp;quot;something wrong here&amp;quot;
## 
## [[4]]
## [1] -6.480741&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but it’s verbose and easy to mess up. My advice here is that if you want to skip errors in loops you don’t write loops! This is quite easy with the &lt;code&gt;purrr&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)

result = map(some_numbers, some_function)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s several advantages here already; no need to initialize an empty structure to hold your result, and no need to think about indices, which can sometimes get confusing. This however does not work either; there’s still the problem that we have a character inside &lt;code&gt;some_numbers&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error in sqrt(x) : non-numeric argument to mathematical function&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;purrr&lt;/code&gt; contains some very amazing functions for error handling, &lt;code&gt;safely()&lt;/code&gt; and &lt;code&gt;possibly()&lt;/code&gt;. Let’s try &lt;code&gt;possibly()&lt;/code&gt; first:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possibly_some_function = possibly(some_function, otherwise = &amp;quot;something wrong here&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;possibly()&lt;/code&gt; takes a function as argument as well as &lt;code&gt;otherwise&lt;/code&gt;; this is where you define a return value in case something is wrong. &lt;code&gt;possibly()&lt;/code&gt; then returns a new function that skips errors:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result = map(some_numbers, possibly_some_function)

print(result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] -1.378405
## 
## [[2]]
## [1] 4.472136
## 
## [[3]]
## [1] &amp;quot;something wrong here&amp;quot;
## 
## [[4]]
## [1] -6.480741&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use &lt;code&gt;possibly()&lt;/code&gt; on a function, you’re politely telling R “would you kindly apply the function wherever possible, and if not, tell me where there was an issue”. What about &lt;code&gt;safely()&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;safely_some_function = safely(some_function)


result = map(some_numbers, safely_some_function)

str(result)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 4
##  $ :List of 2
##   ..$ result: num -1.38
##   ..$ error : NULL
##  $ :List of 2
##   ..$ result: num 4.47
##   ..$ error : NULL
##  $ :List of 2
##   ..$ result: NULL
##   ..$ error :List of 2
##   .. ..$ message: chr &amp;quot;invalid argument to unary operator&amp;quot;
##   .. ..$ call   : language -x
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:3] &amp;quot;simpleError&amp;quot; &amp;quot;error&amp;quot; &amp;quot;condition&amp;quot;
##  $ :List of 2
##   ..$ result: num -6.48
##   ..$ error : NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major difference with &lt;code&gt;possibly()&lt;/code&gt; is that &lt;code&gt;safely()&lt;/code&gt; returns a more complex object: it returns a list of lists. There are as many lists as there are elements in &lt;code&gt;some_numbers&lt;/code&gt;. Let’s take a look at the first one:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $result
## [1] -1.378405
## 
## $error
## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;result[[1]]&lt;/code&gt; is a list with a &lt;code&gt;result&lt;/code&gt; and an &lt;code&gt;error&lt;/code&gt;. If there was no error, we get a value in &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;NULL&lt;/code&gt; in &lt;code&gt;error&lt;/code&gt;. If there was an &lt;code&gt;error&lt;/code&gt;, this is what we see:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(result[[3]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $result
## NULL
## 
## $error
## &amp;lt;simpleError in -x: invalid argument to unary operator&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because lists of lists are not easy to handle, I like to use &lt;code&gt;possibly()&lt;/code&gt;, but if you use &lt;code&gt;safely()&lt;/code&gt; you might want to know about &lt;code&gt;transpose()&lt;/code&gt;, which is another function from &lt;code&gt;purrr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result2 = transpose(result)

str(result2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 2
##  $ result:List of 4
##   ..$ : num -1.38
##   ..$ : num 4.47
##   ..$ : NULL
##   ..$ : num -6.48
##  $ error :List of 4
##   ..$ : NULL
##   ..$ : NULL
##   ..$ :List of 2
##   .. ..$ message: chr &amp;quot;invalid argument to unary operator&amp;quot;
##   .. ..$ call   : language -x
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:3] &amp;quot;simpleError&amp;quot; &amp;quot;error&amp;quot; &amp;quot;condition&amp;quot;
##   ..$ : NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;result2&lt;/code&gt; is now a list of two lists: a &lt;code&gt;result&lt;/code&gt; list holding all the results, and an &lt;code&gt;error&lt;/code&gt; list holding all the error message. You can get results with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result2$result&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] -1.378405
## 
## [[2]]
## [1] 4.472136
## 
## [[3]]
## NULL
## 
## [[4]]
## [1] -6.480741&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope you enjoyed this blog post, and that these functions will make your life easier!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing box office revenue by genre</title>
      <link>/post/2017-12-04-visualizing-box-office-revenue-by-genre/</link>
      <pubDate>Mon, 04 Dec 2017 06:34:55 +0200</pubDate>
      
      <guid>/post/2017-12-04-visualizing-box-office-revenue-by-genre/</guid>
      <description>&lt;p&gt;After having watched Justice League in cinema, I was impressed by all of the special effects and how good they were. I started wondering myself: How much does a movie like that cost? And most importantly, how big is the box-office revenue for this kind of blockbuster? I found an answer in &lt;a href=&#34;http://www.the-numbers.com/movie/budgets/all&#34;&gt;The Numbers&lt;/a&gt;. I have then decided to make a database from the data available on this website. I have retrieved the 500th biggest movie budgets. Initially I just had a database with 5 variables on movies:&lt;br&gt; • the release date&lt;br&gt; • the name &lt;br&gt; • the production budget &lt;br&gt; • the dosmestic gross &lt;br&gt; • the worldwide gross &lt;br&gt; Thereafter, I crossed sources to get more variables. Data was scrapped on Wikipedia and IMDb. We finally get a dataset with 30 variables such as lists of actors, affiches url, distributions, rate and the number of raters from IMDb , etc…&lt;br&gt; You can find a complete description of the dataset on &lt;a href=&#34;https://github.com/krosamont/Cinema&#34;&gt;GitHub&lt;/a&gt;. All the data was scrapped via the package &lt;code&gt;rvest&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;In this post, I describe the different steps leading to the treemap: &lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;tmp1&#34; class=&#34;tmap&#34;&gt;

&lt;/div&gt;
&lt;div id=&#34;starting-point&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;STARTING POINT&lt;/h1&gt;
&lt;p&gt;First of all we read the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;db = read.csv(&amp;quot;https://cdn.rawgit.com/krosamont/Cinema/dd7eca65/moviedb500.csv&amp;quot;,
              stringsAsFactors = FALSE)
#You can excecute the following line to have more information about the variable type.
#str(db) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we want to transform variables related to money in numeric variables and the movie realease dates in date variable using &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

db = db %&amp;gt;%
        mutate( Release.Date = as.Date(Release.Date, &amp;quot;%m/%d/%Y&amp;quot;), 
                Running.time = as.numeric(stringr::str_sub(Running.time,1,3)),
                Rate = as.numeric(Rate),
                Raters = as.numeric(gsub(&amp;quot;,&amp;quot;, &amp;quot;&amp;quot;, Raters)),
                Production.Budget = as.numeric(gsub(&amp;quot;[,$]&amp;quot;, &amp;quot;&amp;quot;,
                                                 Production.Budget)),
                Domestic.Gross = as.numeric(gsub(&amp;quot;[,$]&amp;quot;, &amp;quot;&amp;quot;,
                                                 Domestic.Gross)),
                Worldwide.Gross = as.numeric(gsub(&amp;quot;[,$]&amp;quot;, &amp;quot;&amp;quot;,
                                                 Worldwide.Gross)) ) %&amp;gt;%
        arrange(desc(Worldwide.Gross))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset looks better. As you have seen on top of this post. We want to design a treemap chart to visualize box-office revenue by genre. Let’s see how many movie genres are present in the data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UniqueGenres = unique(db$Genres)
length(UniqueGenres)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 224&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(UniqueGenres, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Action Adventure Fantasy Sci-Fi&amp;quot;                  
## [2] &amp;quot;Action Adventure Sci-Fi&amp;quot;                          
## [3] &amp;quot;Action Crime Thriller&amp;quot;                            
## [4] &amp;quot;Adventure Drama Fantasy Mystery&amp;quot;                  
## [5] &amp;quot;Animation Adventure Comedy Family Fantasy Musical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are 224 combinations of genres, which is way too many combinations. We need to reduce them in a way that each movie has 2 genres at the most: A main genre and a subgenre.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;main-genres&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;MAIN GENRES&lt;/h1&gt;
&lt;p&gt;Let’s start with a simple barplot to visualize the most-represented genre from the 224 combinations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggthemes)

all_genres = separate_rows(db %&amp;gt;% 
                           group_by(Genres) %&amp;gt;% 
                           select(Genres) %&amp;gt;% 
                           filter(row_number() ==1),
                           Genres, sep=&amp;quot;[[:space:]]&amp;quot;)

name_order = names(sort(table(all_genres)))

ggplot(all_genres, aes(Genres)) +
                theme_minimal( ) + 
        geom_bar( stat = &amp;quot;count&amp;quot;, fill=&amp;quot;#007acc&amp;quot; ) +
        coord_flip() +
        scale_x_discrete(limits = name_order)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-12-04-visualizing-box-office-revenue-by-genre_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that Adventure and Action are the most important genres, followed by those between Comedy and Sci-fi. The genres that come after Sci-fi are present in less than 60 combinations of genres. Hence we will consider them as subgenres. We have 8 main genres: &lt;br&gt; • Adventure &lt;br&gt; • Action &lt;br&gt; • Comedy &lt;br&gt; • Drama &lt;br&gt; • Family &lt;br&gt; • &lt;del&gt;Fantasy&lt;/del&gt; &lt;br&gt; • Thriller &lt;br&gt; • &lt;del&gt;Sci-Fi&lt;/del&gt; &lt;br&gt; But we also know that Sci-Fi and Fantasy can be seen as subgenres from Adventure or Action. Therefore, we finally keep 6 genres. &lt;br&gt; We have to check that all movies can have a main genre from the 6 genres that we have choosen. For that, we simply check that each combination have at least one of the main genre :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mainGenres= paste(c(&amp;quot;Adventure&amp;quot;, &amp;quot;Action&amp;quot;,  &amp;quot;Comedy&amp;quot;, 
                    &amp;quot;Drama&amp;quot;, &amp;quot;Family&amp;quot;, &amp;quot;Thriller&amp;quot;),
                  collapse=&amp;quot;|&amp;quot;)

# grepl returns true for each genre combination if at least one of the main genre is present
length(grepl(mainGenres, db$Genres))/length(db$Genres)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apparently, this is the case :)&lt;/p&gt;
&lt;div id=&#34;first-reduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;FIRST REDUCTION&lt;/h3&gt;
&lt;p&gt;We finally add a main genre to all movies.&lt;br&gt; &lt;strong&gt;Be careful, The main genre of each movie will depend on the order in which you attribute the main genre. So the final shape of the output will depend on this step.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#1
db$Genresl1=ifelse(grepl(&amp;quot;Family&amp;quot;,db$Genres),
                   &amp;quot;Family&amp;quot;, db$Genres)

#2
db$Genresl1=ifelse(grepl(&amp;quot;Drama&amp;quot;, db$Genresl1),
                   &amp;quot;Drama&amp;quot;, db$Genresl1)

#3
db$Genresl1=ifelse( grepl(&amp;quot;Thriller&amp;quot;, db$Genresl1),
                    &amp;quot;Thriller&amp;quot;, db$Genresl1)

#4
db$Genresl1=ifelse(grepl(&amp;quot;Action&amp;quot;, db$Genresl1),
                   &amp;quot;Action&amp;quot;, db$Genresl1)

#5
db$Genresl1 =ifelse(grepl(&amp;quot;Adventure&amp;quot;, db$Genresl1),
                    &amp;quot;Adventure&amp;quot;, db$Genresl1)

#6
db$Genresl1=ifelse(grepl(&amp;quot;Comedy&amp;quot;, db$Genresl1),
                   &amp;quot;Comedy&amp;quot;, db$Genresl1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the main genre were attributed, let’s focus on the subgenre.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;subgenres&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;SUBGENRES&lt;/h1&gt;
&lt;p&gt;We have seen that only 6 genres could be considered as main genres. However, in this part we will consider that all genres can be considered as subgenres. Now one of the difficulties is to decide which subgenre to select when there is more than one option. Association rules can help us in this task. We can see which subgenres are the most present for each genre and their level of dependency.&lt;/p&gt;
&lt;div id=&#34;association-rules&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ASSOCIATION RULES&lt;/h2&gt;
&lt;p&gt;Let’s analyze the different genre combinations through an association rule analysis. We need first to read data as transaction. For that we use the package &lt;code&gt;arules&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(arules)
#no duplicate combinations!
item_genres = read.transactions(&amp;quot;https://cdn.rawgit.com/krosamont/Cinema/dd7eca65/itemGenres.csv&amp;quot;,
                                format = &amp;quot;basket&amp;quot;, sep=&amp;quot;:&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this post, we will focus ourselves on 2 association rule indicators: &lt;strong&gt;the support&lt;/strong&gt; and &lt;strong&gt;the confidence&lt;/strong&gt;. &lt;br&gt; Support and confidence are displayed like the result bellow when the function &lt;code&gt;arules::rules&lt;/code&gt; is used. &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##     lhs              rhs      support     confidence lift     count
## [1] {Documentary} =&amp;gt; {Drama}  0.004444444 1.0000000  2.777778  1   
## [2] {War}         =&amp;gt; {Drama}  0.057777778 0.9285714  2.579365 13   
## [3] {History}     =&amp;gt; {Drama}  0.080000000 0.9473684  2.631579 18   
## [4] {Animation}   =&amp;gt; {Family} 0.208888889 0.9591837  2.731852 47&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;• &lt;strong&gt;Support&lt;/strong&gt; indicates how frequently genres in columns lhs and rhs appear together in the 224 combinations. The first row of the result above means that War and Drama appear together in 5,78% of combinations.&lt;/p&gt;
&lt;p&gt;• &lt;strong&gt;Confidence&lt;/strong&gt; is an indication of how often the rule has been found to be true. It can also be seen as a conditional probability. { X =&amp;gt; Y } means P(Y | X). This is the probability that the genre Y is also present when we already know that genre X is present. { War =&amp;gt; Drama } = 0.929 from the second line of the result above means that Drama will be present in 92,9% of combination where War is present.&lt;br&gt; &lt;strong&gt;But be carefull, this relation is not neccesarly true in the opposite direction!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To see all association rules starting from a confidence level of 30% between 2 genres we write: &lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rules = apriori(item_genres, 
                parameter=list(support=(1/nrow(item_genres)), 
                confidence=0.3, minlen=2, maxlen=2)  )
ins_rules = inspect(rules) 

ins_rules&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to focus on the relationship between subgenres and main genres, we can filter the rhs columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mainGenres = unlist(strsplit(mainGenres, &amp;quot;|&amp;quot;, fixed = TRUE))
ins_rules = ins_rules %&amp;gt;% 
        #removing the arrow =&amp;gt;
        .[,-2] %&amp;gt;%
        #removing the brackets for both columns, lhs and rhs
        mutate(lhs = trimws(gsub(&amp;quot;\\{|\\}&amp;quot;,&amp;quot;&amp;quot;,lhs)),
               rhs = trimws(gsub(&amp;quot;\\{|\\}&amp;quot;,&amp;quot;&amp;quot;,rhs))) %&amp;gt;%
        filter(rhs %in% mainGenres) %&amp;gt;%
        group_by(lhs) %&amp;gt;%
        filter(row_number() == 3) %&amp;gt;%
        arrange(lhs, desc(confidence))

ins_rules&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 17 x 6
## # Groups:   lhs [17]
##          lhs       rhs    support confidence      lift count
##        &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Adventure    Action 0.29333333  0.5739130 1.1739130    66
##  2 Animation Adventure 0.16888889  0.7755102 1.5173026    38
##  3 Biography Adventure 0.01333333  0.3333333 0.6521739     3
##  4    Comedy Adventure 0.18666667  0.5121951 1.0021209    42
##  5     Crime    Comedy 0.04888889  0.3548387 0.9736428    11
##  6     Drama Adventure 0.13333333  0.3703704 0.7246377    30
##  7    Family Adventure 0.24888889  0.7088608 1.3869015    56
##  8   Fantasy    Action 0.12888889  0.3866667 0.7909091    29
##  9   History Adventure 0.03555556  0.4210526 0.8237986     8
## 10   Musical    Family 0.06222222  0.8750000 2.4920886    14
## 11   Mystery Adventure 0.06666667  0.5000000 0.9782609    15
## 12   Romance    Family 0.05333333  0.3000000 0.8544304    12
## 13    Sci-Fi    Family 0.08888889  0.3125000 0.8900316    20
## 14     Sport    Family 0.02222222  0.5000000 1.4240506     5
## 15  Thriller Adventure 0.13777778  0.4305556 0.8423913    31
## 16       War Adventure 0.02222222  0.3571429 0.6987578     5
## 17   Western Adventure 0.02222222  0.6250000 1.2228261     5&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;barplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;BARPLOT&lt;/h3&gt;
&lt;p&gt;We create a new variable that we named: &lt;code&gt;withoutMainGenres&lt;/code&gt;. This variable is the combination of genres without the main genre. If a movie has the combination: “Drama War Action Biography” and his main genre is “Drama”, then value of &lt;code&gt;withoutMainGenres&lt;/code&gt; will be “War Action Biography”. If it’s not clear enough, I suggest that you run the code and to compare the variables &lt;code&gt;withoutMainGenres&lt;/code&gt; and &lt;code&gt;Genres&lt;/code&gt;. Once this new variable is made, we draw again a barplot to see the ditribution of genres.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;db$withoutMainGenres = trimws(mapply(gsub, db$Genresl1, &amp;quot;&amp;quot;, db$Genres))

all_genres = separate_rows(db %&amp;gt;% 
                           group_by(withoutMainGenres) %&amp;gt;% 
                           select(withoutMainGenres) %&amp;gt;% 
                           filter(row_number() ==1),
                           withoutMainGenres, 
                           sep=&amp;quot;[[:space:]]&amp;quot;) %&amp;gt;% 
             rename( Genres=withoutMainGenres) %&amp;gt;%
             filter(nchar(Genres)&amp;gt;0)

name_order = names(sort(table(all_genres)))

ggplot(all_genres, aes(Genres)) +
                theme_minimal( ) + 
        geom_bar( stat = &amp;quot;count&amp;quot;, fill=&amp;quot;#007acc&amp;quot; ) +
        coord_flip() +
        scale_x_discrete(limits = name_order)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-12-04-visualizing-box-office-revenue-by-genre_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that there are still a lot of adventure movies. We use the result seen in the association rules and the barplot to make the subgenres.&lt;br&gt; We begin with the genre Animation because we want to regroup all of these movies in the same category. Then we add subgenres in an ascending order, from the less important to the most one.&lt;br&gt; However, movies from musical, music and horror genres are added at the end of the script because the attribution of these genres for the movie in our dataset is questionable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;db$Genresl2=ifelse(grepl(&amp;quot;Animation&amp;quot;,db$withoutMainGenres), 
                   &amp;quot;Animation&amp;quot;, db$withoutMainGenres)
db$Genresl2=ifelse(grepl(&amp;quot;Documentary&amp;quot;,db$Genresl2),
                   &amp;quot;Documentary&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Biography&amp;quot;, db$Genresl2), 
                   &amp;quot;Biography&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Western&amp;quot;,db$Genresl2), 
                   &amp;quot;Western&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Sport&amp;quot;,db$Genresl2), 
                   &amp;quot;Sport&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;War&amp;quot;,db$Genresl2), 
                   &amp;quot;War&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Mystery&amp;quot;,db$Genresl2), 
                   &amp;quot;Mystery&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Romance&amp;quot;,db$Genresl2), 
                   &amp;quot;Romance&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Crime&amp;quot;,db$Genresl2), 
                   &amp;quot;Crime&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Drama&amp;quot;,db$Genresl2), 
                   &amp;quot;Drama&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Fantasy&amp;quot;,db$Genresl2), 
                   &amp;quot;Fantasy&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Sci-Fi&amp;quot;,db$Genresl2), 
                   &amp;quot;Sci-Fi&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Comedy&amp;quot;,db$Genresl2), 
                   &amp;quot;Comedy&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Thriller&amp;quot;,db$Genresl2), 
                   &amp;quot;Thriller&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Adventure&amp;quot;,db$Genresl2), 
                   &amp;quot;Adventure&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Musical&amp;quot;,db$Genresl2), 
                   &amp;quot;Musical&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Music&amp;quot;,db$Genresl2), 
                   &amp;quot;Music&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(grepl(&amp;quot;Horror&amp;quot;,db$Genresl2), 
                   &amp;quot;Horror&amp;quot;, db$Genresl2)
db$Genresl2=ifelse(db$Genresl2==&amp;quot;&amp;quot;,
                   db$Genresl1, db$Genresl2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our 2 levels of genres. We can build our treemap!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;treemap-with-treemapify&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;TREEMAP WITH TREEMAPIFY&lt;/h1&gt;
&lt;p&gt;To design the treemap, we need to regroup movies by main genres and subgenres, then we sum their Worlwide Gross revenue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary.Genre = db %&amp;gt;%
        group_by(Genresl1, Genresl2) %&amp;gt;%
        summarise(Sum_Gross = sum(Worldwide.Gross))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we design the treemap using &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;treemapify&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(treemapify)

ggplot(summary.Genre, aes(area = Sum_Gross ,
                          fill = Genresl1, label = Genresl2,
                          subgroup =Genresl1)) +
        geom_treemap() +
        geom_treemap_subgroup_border() +
        geom_treemap_subgroup_text(place = &amp;quot;centre&amp;quot;, 
                                   grow = T, 
                                   alpha = 0.5, 
                                   colour = &amp;quot;black&amp;quot;, 
                                   fontface = &amp;quot;italic&amp;quot;, 
                                   min.size = 0) +
        geom_treemap_text(colour = &amp;quot;white&amp;quot;, 
                          place = &amp;quot;topleft&amp;quot;, 
                          reflow = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-12-04-visualizing-box-office-revenue-by-genre_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Here we have a first result but we can do better by adding some interactivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;treemap-with-highcharter&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;TREEMAP WITH HIGHCHARTER&lt;/h1&gt;
&lt;p&gt;Let’s add some interactivity using the package &lt;code&gt;highcharter&lt;/code&gt;. We use the github version (there are more functions).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;jbkunst/highcharter&amp;quot;)

library(highcharter)
hctreemap2(data = db,
           group_vars = c(&amp;quot;Genresl1&amp;quot;, &amp;quot;Genresl2&amp;quot;),
           size_var = &amp;quot;Worlwide.Gross&amp;quot;,
           color_var = &amp;quot;Genresl2&amp;quot;,
           layoutAlgorithm = &amp;quot;squarified&amp;quot;,
           levelIsConstant = FALSE,
           levels = list(
                   list(level = 1, 
                        dataLabels = list(enabled = TRUE)),
                   list(level = 2, 
                        dataLabels = list(enabled = FALSE))
           )) %&amp;gt;% 
        hc_tooltip(pointFormat = &amp;quot;&amp;lt;b&amp;gt;{point.name}&amp;lt;/b&amp;gt;:&amp;lt;br&amp;gt;
                   Worlwide Gross: $ {point.value:,.0f}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following error message appears:&lt;br&gt; &lt;font color=&#34;red&#34;&gt;&lt;strong&gt;Error in hctreemap2(data = db, group_vars = c(“Genresl1”, “Genresl2”) :&lt;br&gt; Treemap data uses same label at multiple levels.&lt;/strong&gt; &lt;/font&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;We can’t design a 2 levels treemap with &lt;code&gt;highcharter&lt;/code&gt; because main genres and subgenres share some genres. Hence, R is a great tool for data manipulation but javascript is a better tool for visualization. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;We can easily design a 2 levels responsive treemap with the library &lt;a href=&#34;https://www.highcharts.com/&#34;&gt;highchart&lt;/a&gt; in javascript.&lt;/p&gt;
&lt;div id=&#34;tmp2&#34; class=&#34;tmap&#34;&gt;

&lt;/div&gt;
&lt;script
  src=&#34;https://code.jquery.com/jquery-3.2.1.min.js&#34;
  integrity=&#34;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&#34;
  crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;script
  src=&#34;https://code.jquery.com/ui/1.12.1/jquery-ui.min.js&#34;
  integrity=&#34;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&#34;
  crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://code.highcharts.com/highcharts.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://code.highcharts.com/modules/treemap.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdn.rawgit.com/krosamont/Cinema/dd7eca65/treemap/js/cinemaTreemap.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.rawgit.com/krosamont/Cinema/dd7eca65/treemap/css/styleSheet.css&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Functional peace of mind</title>
      <link>/post/2017-11-14-functional-peace-of-mind/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-11-14-functional-peace-of-mind/</guid>
      <description>&lt;p&gt;I think what I enjoy the most about functional programming is the peace of mind that comes with it. With functional programming, there’s a lot of stuff you don’t need to think about. You can write functions that are general enough so that they solve a variety of problems. For example, imagine for a second that R does not have the &lt;code&gt;sum()&lt;/code&gt; function anymore. If you want to compute the sum of, say, the first 100 integers, you could write a loop that would do that for you:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers = 0

for (i in 1:100){
  numbers = numbers + i
}

print(numbers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5050&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with this approach, is that you cannot reuse any of the code there, even if you put it inside a function. For instance, what if you want to merge 4 datasets together? You would need something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
data(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars1 = mtcars %&amp;gt;%
  mutate(id = &amp;quot;1&amp;quot;)

mtcars2 = mtcars %&amp;gt;%
  mutate(id = &amp;quot;2&amp;quot;)

mtcars3 = mtcars %&amp;gt;%
  mutate(id = &amp;quot;3&amp;quot;)

mtcars4 = mtcars %&amp;gt;%
  mutate(id = &amp;quot;4&amp;quot;)

datasets = list(mtcars1, mtcars2, mtcars3, mtcars4)

temp = datasets[[1]]

for(i in 1:3){
  temp = full_join(temp, datasets[[i+1]])
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;disp&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;qsec&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;gear&amp;quot;, &amp;quot;carb&amp;quot;, &amp;quot;id&amp;quot;)
## Joining, by = c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;disp&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;qsec&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;gear&amp;quot;, &amp;quot;carb&amp;quot;, &amp;quot;id&amp;quot;)
## Joining, by = c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;disp&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;qsec&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;gear&amp;quot;, &amp;quot;carb&amp;quot;, &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(temp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 128
## Variables: 12
## $ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19....
## $ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, ...
## $ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 1...
## $ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, ...
## $ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.9...
## $ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3...
## $ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 2...
## $ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, ...
## $ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, ...
## $ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, ...
## $ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, ...
## $ id   &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, the logic is very similar as before, but you need to think carefully about the structure holding your elements (which can be numbers, datasets, characters, etc…) as well as be careful about indexing correctly… and depending on the type of objects you are working on, you might need to tweak the code further.&lt;/p&gt;
&lt;p&gt;How would a functional programming approach make this easier? Of course, you could use &lt;code&gt;purrr::reduce()&lt;/code&gt; to solve these problems. However, since I assumed that &lt;code&gt;sum()&lt;/code&gt; does not exist, I will also assume that &lt;code&gt;purrr::reduce()&lt;/code&gt; does not exist either and write my own, clumsy implementation. Here’s the code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_reduce = function(a_list, a_func, init = NULL, ...){

  if(is.null(init)){
    init = `[[`(a_list, 1)
    a_list = tail(a_list, -1)
  }

  car = `[[`(a_list, 1)
  cdr = tail(a_list, -1)
  init = a_func(init, car, ...)

  if(length(cdr) != 0){
    my_reduce(cdr, a_func, init, ...)
  }
  else {
    init
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can look much more complicated than before, but the idea is quite simple; &lt;em&gt;if you know about recursive functions&lt;/em&gt; (recursive functions are functions that call themselves). I won’t explain how the function works, because it is not the main point of the article (but if you’re curious, I encourage you to play around with it). The point is that now, I can do the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_reduce(list(1,2,3,4,5), `+`)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_reduce(datasets, full_join) %&amp;gt;% glimpse&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;disp&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;qsec&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;gear&amp;quot;, &amp;quot;carb&amp;quot;, &amp;quot;id&amp;quot;)
## Joining, by = c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;disp&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;qsec&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;gear&amp;quot;, &amp;quot;carb&amp;quot;, &amp;quot;id&amp;quot;)
## Joining, by = c(&amp;quot;mpg&amp;quot;, &amp;quot;cyl&amp;quot;, &amp;quot;disp&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;drat&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;qsec&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;gear&amp;quot;, &amp;quot;carb&amp;quot;, &amp;quot;id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 128
## Variables: 12
## $ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19....
## $ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, ...
## $ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 1...
## $ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, ...
## $ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.9...
## $ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3...
## $ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 2...
## $ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, ...
## $ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, ...
## $ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, ...
## $ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, ...
## $ id   &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;1...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if I need to merge another dataset, I don’t need to change anything at all. Plus, because &lt;code&gt;my_reduce()&lt;/code&gt; is very general, I can even use it for situation I didn’t write it for in the first place:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_reduce(list(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;), paste)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a b c d e&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, &lt;code&gt;paste()&lt;/code&gt; is vectorized, so you could just as well do &lt;code&gt;paste(1, 2, 3, 4, 5)&lt;/code&gt;, but again, I want to insist on the fact that writing or using such functions allows you to abstract over a lot of thing. There is nothing specific to any type of object in &lt;code&gt;my_reduce()&lt;/code&gt;, whereas the loops have to be tailored for the kind of object you’re working with. As long as the &lt;code&gt;a_func&lt;/code&gt; argument is a binary operator that combines the elements inside &lt;code&gt;a_list&lt;/code&gt;, it’s going to work. And I don’t need to think about indexing, about having temporary variables or thinking about the structure that will hold my results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping data from the local elections</title>
      <link>/post/2017-10-27-scraping-data-from-the-local-elections/</link>
      <pubDate>Fri, 27 Oct 2017 06:34:55 +0200</pubDate>
      
      <guid>/post/2017-10-27-scraping-data-from-the-local-elections/</guid>
      <description>&lt;p&gt;One of my journalist friend was looking at the result of the local election in Luxembourg and he was dissatisfied because he was unable to compare the results of all the communes. In fact, he wanted to compare the number of women that were candidates in each commune. So I asked him to hold on and I came back one hour later with this script that enables him to collect results of all communes in one table.&lt;/p&gt;
&lt;p&gt;At the beginning, it was private code but I thought that it could be another great scraping example after the excellent post written by my colleague Bruno Rodrigues about scraping data from STATEC public tables.&lt;/p&gt;
&lt;p&gt;So let’s get started. First, let’s load some packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#we have to load the packages if they are not installed on your computer,
#begin with the commented following lines:
#install.packages( &amp;quot;rvest&amp;quot; )
#install.packages( &amp;quot;tidyverse&amp;quot; )
#install.packages( &amp;quot;stringr&amp;quot; )

library(rvest) #to scrap
library(dplyr) #to manipulate data
library(stringr) #to manipulate string&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to collect results of all communes in one data frame. We go to &lt;a href=&#34;http://www.elections.public.lu&#34; class=&#34;uri&#34;&gt;http://www.elections.public.lu&lt;/a&gt; and we collect data that is seen in the GIF bellow:&lt;/p&gt;
&lt;p&gt;After clicking on different communes, we notice that the URLs have the same format. They have 3 parts :&lt;br&gt; 1: “&lt;a href=&#34;http://www.elections.public.lu/fr/elections-communales/2017/resultats/communes/&#34; class=&#34;uri&#34;&gt;http://www.elections.public.lu/fr/elections-communales/2017/resultats/communes/&lt;/a&gt;”, the first part of the URL.&lt;br&gt; 2: “communes_names” the name of the city is the second part of the URL.&lt;br&gt; 3: “.html” is the last part.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;For example, the complete URL for the commune of Luxembourg will be: &lt;a href=&#34;http://www.elections.public.lu/fr/elections-communales/2017/resultats/communes/luxembourg.html&#34; class=&#34;uri&#34;&gt;http://www.elections.public.lu/fr/elections-communales/2017/resultats/communes/luxembourg.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;There are 103 communes, so we have to put all of them in a list. We scrape the 103 communes in one list via the script bellow :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;url = &amp;quot;http://www.elections.public.lu/fr/elections-communales/2017/resultats/communes/bech.html&amp;quot;
communes = read_html(url) %&amp;gt;% 
        html_nodes(&amp;quot;#communes #communes-az li&amp;quot;) %&amp;gt;%
        html_text() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We verify that we have a list of 103 vectors and then we check the 5 first rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(communes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 103&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(communes,5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;\r\n        Beaufort\r\n                a rendu l&amp;#39;ensemble de ses résultats\r\n    &amp;quot; 
## [2] &amp;quot;\r\n        Bech\r\n                a rendu l&amp;#39;ensemble de ses résultats\r\n    &amp;quot;     
## [3] &amp;quot;\r\n        Beckerich\r\n                a rendu l&amp;#39;ensemble de ses résultats\r\n    &amp;quot;
## [4] &amp;quot;\r\n        Berdorf\r\n                a rendu l&amp;#39;ensemble de ses résultats\r\n    &amp;quot;  
## [5] &amp;quot;\r\n        Bertrange\r\n                a rendu l&amp;#39;ensemble de ses résultats\r\n    &amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that the 103 communes are present but we still have to clean the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Data is not cleaned and there are some useless characters that need to be removed.
#We need to clean data.
communes = gsub(&amp;quot;a rendu l&amp;#39;ensemble de ses résultats&amp;quot;,&amp;quot; &amp;quot;, communes )
communes = trimws(gsub(&amp;quot;\r\n&amp;quot;,&amp;quot;&amp;quot;,communes ))
communes = gsub(&amp;quot;/Attert&amp;quot;,&amp;quot;-sur-attert&amp;quot;, communes )
communes = gsub(&amp;quot; - &amp;quot;, &amp;quot;-&amp;quot;,communes )
communes = gsub(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;,communes )
communes = gsub(&amp;quot;&amp;#39;&amp;quot;, &amp;quot;-&amp;quot;,communes )
communes = gsub(&amp;quot;é&amp;quot;, &amp;quot;e&amp;quot;,communes )
communes = gsub(&amp;quot;û&amp;quot;, &amp;quot;u&amp;quot;,communes )
communes = gsub(&amp;quot;ä&amp;quot;, &amp;quot;a&amp;quot;,communes )

#Lower case
communes = tolower(communes)

head(communes, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;beaufort&amp;quot;  &amp;quot;bech&amp;quot;      &amp;quot;beckerich&amp;quot; &amp;quot;berdorf&amp;quot;   &amp;quot;bertrange&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the list of the 103 communes, we will write a function that will enable us to collect data that we want to display in our data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Function to have the result for one commune.
  result = function(x){
  #scrapping data
  vote = read_html(paste(&amp;quot;http://www.elections.public.lu/fr/elections-communales/2017/resultats/communes/&amp;quot;,x,&amp;quot;.html&amp;quot;, sep=&amp;quot;&amp;quot;)) %&amp;gt;% 
          html_nodes(&amp;quot;#lux-number .lux-number ul li&amp;quot;) %&amp;gt;%
          html_text()%&amp;gt;%.[-1]
  
  #Conditions need to be added to have clean data.
  #Here we add a trick, the vector 14 and 15 are the only ones that   haven&amp;#39;t the string &amp;quot;\r\n&amp;quot;.
  #So we add &amp;quot;\r\n&amp;quot; to these vectors.
  if(nchar(vote[14]) &amp;gt; 21){
          vote[14] = gsub(&amp;quot;ble&amp;quot;,&amp;quot;ble\r\n&amp;quot;, vote[14],perl = FALSE)
  }
  if(nchar(vote[15]) &amp;gt; 21){
          vote[15] = gsub(&amp;quot;mé&amp;quot;,&amp;quot;mé\r\n&amp;quot;, vote[15],perl = FALSE)
  }
  #We split vectors to dissociate the results (numbers) and the titles   (letters).
  vote = unlist(str_split(vote, &amp;quot;\r\n&amp;quot;))
  vote = trimws(vote)
  vote = vote[vote != &amp;quot;&amp;quot;]
  
  #Here we have similar title so we change them to not be confused.
  #Candidat Lux means Luxemburgish Candidates  &amp;amp; Electeur Lux means   Luxemburgish voters. 
  vote[7] = gsub(&amp;quot;Lux&amp;quot;, &amp;quot;Candidat Lux&amp;quot;, vote[7] )
  vote[9] = gsub(&amp;quot;Non Lu&amp;quot;, &amp;quot;Candidat Non Lu&amp;quot;, vote[9] )
  vote[13] = gsub(&amp;quot;Lux&amp;quot;, &amp;quot;Electeur Lux&amp;quot;, vote[13] )
  vote[15] = gsub(&amp;quot;Non Lu&amp;quot;, &amp;quot;Electeur Non Lu&amp;quot;, vote[15]  )
  
  #We create the data frame.
  #Vector with pair indice value are the results (the column val).
  pair = (1:15)*2
  
  #Vectors with odd index value are the titles (the column title).
  impair = (1:15)*2 - 1
  res = data.frame(communes = rep(x,15), title = vote[impair], val =   vote[pair])
  return(res)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we use the lapply() function to apply this function to the 103 communes and bind them in one data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#We use the result function on all the communes.
res = lapply(communes, result)
#We bind the rows to have a complete data frame with all the results from all communes
#then we bind all the result.
df = do.call(rbind, res)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the 5 first rows of our new data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Now the data that we have look like this:
head(df,5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   communes                       title val
## 1 beaufort                       Total  10
## 2 beaufort                      Femmes   5
## 3 beaufort                      Hommes   5
## 4 beaufort     Candidat Luxembourgeois  10
## 5 beaufort Candidat Non Luxembourgeois   0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, it’s looking good but we are not completely satisfied because we would like to transpose data to have one result in one column. To this end, we use the &lt;code&gt;tidyr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)

#Transposing data will enables us to make analysis faster.
#We transform val in a numeric variable then we transpose data.

tdf = df %&amp;gt;%
        mutate(val = as.numeric(gsub(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;, val))) %&amp;gt;%
        spread(title, val)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the 5 first rows of our new data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Now the data that we have look like this:
head(tdf,5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    communes Blancs Candidat Luxembourgeois Candidat Non Luxembourgeois
## 1  beaufort     78                      10                           0
## 2      bech      0                       8                           0
## 3 beckerich     67                      10                           1
## 4   berdorf     23                      20                           0
## 5 bertrange     75                      45                           7
##   Dans l&amp;#39;urne Electeur Luxembourgeois Electeur Non Luxembourgeois Femmes
## 1        1144                    1170                         114      5
## 2           0                     699                          95      1
## 3        1396                    1393                         137      2
## 4         857                     850                          79      7
## 5        2935                    2972                         478     22
##   Grand total exprimé Grand total possible Hommes Inscrits Nuls Total
## 1                4021                 9234      5     1284   40    10
## 2                   0                    0      7      794    0     8
## 3                5792                11637      9     1530   36    11
## 4                4929                 7371     13      929   15    20
## 5               32880                35620     30     3450  120    52
##   Valables Votes par correspondance
## 1     1026                       71
## 2        0                        0
## 3     1293                      109
## 4      819                       57
## 5     2740                      269&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can export the table in excel or play with your data in R!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;readr::write_excel_csv(tdf,&amp;quot;election_lux.csv&amp;quot;)
#To know where your file is saved, we use the following function:
#setwd()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope you enjoyed reading this post. Don’t hesitate to contact me for any questions. Follow rdata.lu on &lt;a href=&#34;https://twitter.com/rdata_lu?lang=en&#34;&gt;twitter&lt;/a&gt; and subscribe to the &lt;a href=&#34;https://www.youtube.com/channel/UCbazvBnJd7CJ4WnTL6BI6qw&#34;&gt;youtube channel.&lt;/a&gt; See you for the next post ;) &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Kevin&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy peasy STATA-like marginal effects with R</title>
      <link>/post/2017-10-26-easy-peasy-stata-like-marginal-effect-with-r/</link>
      <pubDate>Thu, 26 Oct 2017 06:45:48 +0200</pubDate>
      
      <guid>/post/2017-10-26-easy-peasy-stata-like-marginal-effect-with-r/</guid>
      <description>&lt;p&gt;Model interpretation is essential in the social sciences. If one wants to know the effect of variable &lt;code&gt;x&lt;/code&gt; on the dependent variable &lt;code&gt;y&lt;/code&gt;, marginal effects are an easy way to get the answer. STATA includes a &lt;code&gt;margins&lt;/code&gt; command that has been ported to R by &lt;a href=&#34;http://thomasleeper.com/&#34;&gt;Thomas J. Leeper&lt;/a&gt; of the London School of Economics and Political Science. You can find the source code of the package &lt;a href=&#34;https://github.com/leeper/margins&#34;&gt;on github&lt;/a&gt;. In this short blog post, I demo some of the functionality of &lt;code&gt;margins&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, let’s load some packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(tibble)
library(broom)
library(margins)
library(Ecdat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an example, we are going to use the &lt;code&gt;Participation&lt;/code&gt; data from the &lt;code&gt;Ecdat&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(Participation)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?Participation&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Labor Force Participation

Description

a cross-section

number of observations : 872

observation : individuals

country : Switzerland

Usage

data(Participation)
Format

A dataframe containing :

lfp
labour force participation ?

lnnlinc
the log of nonlabour income

age
age in years divided by 10

educ
years of formal education

nyc
the number of young children (younger than 7)

noc
number of older children

foreign
foreigner ?

Source

Gerfin, Michael (1996) “Parametric and semiparametric estimation of the binary response”, Journal of Applied Econometrics, 11(3), 321-340.

References

Davidson, R. and James G. MacKinnon (2004) Econometric Theory and Methods, New York, Oxford University Press, http://www.econ.queensu.ca/ETM/, chapter 11.

Journal of Applied Econometrics data archive : http://qed.econ.queensu.ca/jae/.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The variable of interest is &lt;code&gt;lfp&lt;/code&gt;: whether the individual participates in the labour force or not. To know which variables are relevant in the decision to participate in the labour force, one could estimate a logit model, using &lt;code&gt;glm()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logit_participation = glm(lfp ~ ., data = Participation, family = &amp;quot;binomial&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we ran the regression, we can take a look at the results. I like to use &lt;code&gt;broom::tidy()&lt;/code&gt; to look at the results of regressions, as &lt;code&gt;tidy()&lt;/code&gt; returns a nice &lt;code&gt;data.frame&lt;/code&gt;, but you could use &lt;code&gt;summary()&lt;/code&gt; if you’re only interested in reading the output:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy(logit_participation)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          term    estimate  std.error  statistic      p.value
## 1 (Intercept) 10.37434616 2.16685216  4.7877499 1.686617e-06
## 2     lnnlinc -0.81504064 0.20550116 -3.9661122 7.305449e-05
## 3         age -0.51032975 0.09051783 -5.6378920 1.721444e-08
## 4        educ  0.03172803 0.02903580  1.0927211 2.745163e-01
## 5         nyc -1.33072362 0.18017027 -7.3859224 1.514000e-13
## 6         noc -0.02198573 0.07376636 -0.2980454 7.656685e-01
## 7  foreignyes  1.31040497 0.19975784  6.5599678 5.381941e-11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the results above, one can only interpret the sign of the coefficients. To know how much a variable influences the labour force participation, one has to use &lt;code&gt;margins()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;effects_logit_participation = margins(logit_participation) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in warn_for_weights(model): &amp;#39;weights&amp;#39; used in model estimation are
## currently ignored!&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(effects_logit_participation)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Average marginal effects&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## glm(formula = lfp ~ ., family = &amp;quot;binomial&amp;quot;, data = Participation)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  lnnlinc     age     educ     nyc       noc foreignyes
##  -0.1699 -0.1064 0.006616 -0.2775 -0.004584     0.2834&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;summary()&lt;/code&gt; on the object returned by &lt;code&gt;margins()&lt;/code&gt; provides more details:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(effects_logit_participation)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      factor     AME     SE       z      p   lower   upper
##         age -0.1064 0.0176 -6.0494 0.0000 -0.1409 -0.0719
##        educ  0.0066 0.0060  1.0955 0.2733 -0.0052  0.0185
##  foreignyes  0.2834 0.0399  7.1102 0.0000  0.2053  0.3615
##     lnnlinc -0.1699 0.0415 -4.0994 0.0000 -0.2512 -0.0887
##         noc -0.0046 0.0154 -0.2981 0.7656 -0.0347  0.0256
##         nyc -0.2775 0.0333 -8.3433 0.0000 -0.3426 -0.2123&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it is also possible to plot the effects with base graphics:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(effects_logit_participation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-26-easy-peasy-stata-like-marginal-effect-with-r_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This uses the basic R plotting capabilities, which is useful because it is a simple call to the function &lt;code&gt;plot()&lt;/code&gt; but if you’ve been using &lt;code&gt;ggplot2&lt;/code&gt; and want this graph to have the same look as the others made with &lt;code&gt;ggplot2&lt;/code&gt; you first need to save the summary in a variable. Let’s overwrite this &lt;code&gt;effects_logit_participation&lt;/code&gt; variable with its summary:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;effects_logit_participation = summary(effects_logit_participation)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now it is possible to use &lt;code&gt;ggplot2&lt;/code&gt; to create the same plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = effects_logit_participation) +
  geom_point(aes(factor, AME)) +
  geom_errorbar(aes(x = factor, ymin = lower, ymax = upper)) +
  geom_hline(yintercept = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-26-easy-peasy-stata-like-marginal-effect-with-r_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So an infinitesimal increase, in say, non-labour income (&lt;code&gt;lnnlinc&lt;/code&gt;) of 0.001 is associated with a decrease of the probability of labour force participation by 0.001*17 percentage points.&lt;/p&gt;
&lt;p&gt;You can also extract the marginal effects of a single variable, with &lt;code&gt;dydx()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(dydx(Participation, logit_participation, &amp;quot;lnnlinc&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dydx_lnnlinc
## 1  -0.15667764
## 2  -0.20014487
## 3  -0.18495109
## 4  -0.05377262
## 5  -0.18710476
## 6  -0.19586986&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which makes it possible to extract the effects for a list of individuals that you can create yourself:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_subjects = tribble(
    ~lfp,  ~lnnlinc, ~age, ~educ, ~nyc, ~noc, ~foreign,
    &amp;quot;yes&amp;quot;,   10.780,  7.0,     4,    1,    1,    &amp;quot;yes&amp;quot;,
     &amp;quot;no&amp;quot;,     1.30,  9.0,     1,    4,    1,    &amp;quot;yes&amp;quot;
)

dydx(my_subjects, logit_participation, &amp;quot;lnnlinc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   dydx_lnnlinc
## 1  -0.09228119
## 2  -0.17953451&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used the &lt;code&gt;tribble()&lt;/code&gt; function from the &lt;code&gt;tibble&lt;/code&gt; package to create this test data set, row by row. Then, using &lt;code&gt;dydx()&lt;/code&gt;, I get the marginal effect of variable &lt;code&gt;lnnlinc&lt;/code&gt; for these two individuals. No doubt that this package will be a huge help convincing more social scientists to try out R and make a potential transition from STATA easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s make ggplot2 purrr again</title>
      <link>/post/2017-10-09-make-ggplot2-purrr-again/</link>
      <pubDate>Mon, 09 Oct 2017 06:45:48 +0200</pubDate>
      
      <guid>/post/2017-10-09-make-ggplot2-purrr-again/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: I’ve included another way of saving a separate plot by group in this article, as pointed out by &lt;a href=&#34;https://twitter.com/monitus/status/849033025631297536&#34;&gt;&lt;code&gt;@monitus&lt;/code&gt;&lt;/a&gt;. Actually, this is the preferred solution; using &lt;code&gt;dplyr::do()&lt;/code&gt; is deprecated, according to Hadley Wickham &lt;a href=&#34;https://twitter.com/hadleywickham/status/719542847045636096&#34;&gt;himself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll be honest: the title is a bit misleading. I will not use &lt;code&gt;purrr&lt;/code&gt; that much in this blog post. Actually, I will use one single &lt;code&gt;purrr&lt;/code&gt; function, at the very end. I use &lt;code&gt;dplyr&lt;/code&gt; much more. However &lt;em&gt;Make ggplot2 purrr&lt;/em&gt; sounds better than &lt;em&gt;Make ggplot dplyr&lt;/em&gt; or whatever the verb for &lt;code&gt;dplyr&lt;/code&gt; would be.&lt;/p&gt;
&lt;p&gt;Also, this blog post was inspired by a stackoverflow question and in particular one of the &lt;a href=&#34;http://stackoverflow.com/a/29035145/1298051&#34;&gt;answers&lt;/a&gt;. So I don’t bring anything new to the table, but I found this stackoverflow answer so useful and so underrated (only 16 upvotes as I’m writing this!) that I wanted to write something about it.&lt;/p&gt;
&lt;p&gt;Basically the idea of this blog post is to show how to create graphs using &lt;code&gt;ggplot2&lt;/code&gt;, but by grouping by a factor variable beforehand. To illustrate this idea, let’s use the data from the &lt;a href=&#34;http://www.rug.nl/ggdc/productivity/pwt/&#34;&gt;Penn World Tables 9.0&lt;/a&gt;. The easiest way to get this data is to install the package called &lt;code&gt;pwt9&lt;/code&gt; with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;pwt9&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then load the data with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;pwt9.0&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s load the needed packages. I am also using &lt;code&gt;ggthemes&lt;/code&gt; which makes themeing your ggplots very easy. I’ll be making &lt;a href=&#34;https://en.wikipedia.org/wiki/Edward_Tufte&#34;&gt;Tufte&lt;/a&gt;-style plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
library(purrr)
library(pwt9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First let’s select a list of countries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country_list &amp;lt;- c(&amp;quot;France&amp;quot;, &amp;quot;Germany&amp;quot;, &amp;quot;United States of America&amp;quot;, &amp;quot;Luxembourg&amp;quot;, &amp;quot;Switzerland&amp;quot;, &amp;quot;Greece&amp;quot;)

small_pwt &amp;lt;- pwt9.0 %&amp;gt;%
  filter(country %in% country_list)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s us also order the countries in the data frame as I have written them in &lt;code&gt;country_list&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;small_pwt &amp;lt;- small_pwt %&amp;gt;%
  mutate(country = factor(country, levels = country_list, ordered = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might be wondering why this is important. At the end of the article, we are going to save the plots to disk. If we do not re-order the countries inside the data frame as in &lt;code&gt;country_list&lt;/code&gt;, the name of the files will not correspond to the correct plots!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: While this can still be interesting to know, especially if you want to order the bars of a barplot made with &lt;code&gt;ggplot2&lt;/code&gt;, I included a suggestion by &lt;a href=&#34;https://twitter.com/expersso/status/846986357792739328&#34;&gt;&lt;code&gt;@expersso&lt;/code&gt;&lt;/a&gt; that does not require your data to be ordered!&lt;/p&gt;
&lt;p&gt;Now when you want to plot the same variable by countries, say &lt;code&gt;avh&lt;/code&gt; (&lt;em&gt;Average annual hours worked by persons engaged&lt;/em&gt;), the usual way to do this is with one of &lt;code&gt;facet_wrap()&lt;/code&gt; or &lt;code&gt;facet_grid()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = small_pwt) + theme_tufte() +
  geom_line(aes(y = avh, x = year)) +
  facet_wrap(~country)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-09-make-ggplot2-purrr-again_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = small_pwt) + theme_tufte() +
  geom_line(aes(y = avh, x = year)) +
  facet_grid(country~.)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-10-09-make-ggplot2-purrr-again_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, for this particular example, &lt;code&gt;facet_grid()&lt;/code&gt; is not very useful, but do notice its argument, &lt;code&gt;country~.&lt;/code&gt;, which is different from &lt;code&gt;facet_wrap()&lt;/code&gt;’s argument. This way, I get the graphs stacked horizontally. If I had used &lt;code&gt;facet_grid(~country)&lt;/code&gt; the graphs would be side by side and completely unreadable.&lt;/p&gt;
&lt;p&gt;Now, let’s go to the meat of this post: what if you would like to have one single graph for each country? You’d probably think of using &lt;code&gt;dplyr::group_by()&lt;/code&gt; to form the groups and then the graphs. This is the way to go, but you also have to use &lt;code&gt;dplyr::do()&lt;/code&gt;. This is because as far as I understand, &lt;code&gt;ggplot2&lt;/code&gt; is not &lt;code&gt;dplyr&lt;/code&gt;-aware, and using an arbitrary function with groups is only possible with &lt;code&gt;dplyr::do()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: As explained in the intro above, I also added the solution that uses &lt;code&gt;tidyr::nest()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Ancient, deprecated way of doing this
plots &amp;lt;- small_pwt %&amp;gt;%
  group_by(country) %&amp;gt;%
  do(plot = ggplot(data = .) + theme_tufte() +
       geom_line(aes(y = avh, x = year)) +
       ggtitle(unique(.$country)) +
       ylab(&amp;quot;Year&amp;quot;) +
       xlab(&amp;quot;Average annual hours worked by persons engaged&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is the approach that uses &lt;code&gt;tidyr::nest()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Preferred approach
plots &amp;lt;- small_pwt %&amp;gt;%
  group_by(country) %&amp;gt;%
  nest() %&amp;gt;%
  mutate(plot = map2(data, country, ~ggplot(data = .x) + theme_tufte() +
       geom_line(aes(y = avh, x = year)) +
       ggtitle(.y) +
       ylab(&amp;quot;Year&amp;quot;) +
       xlab(&amp;quot;Average annual hours worked by persons engaged&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you know &lt;code&gt;dplyr&lt;/code&gt; at least a little bit, the above lines should be easy for you to understand. But notice how we get the title of the graphs, with &lt;code&gt;ggtitle(unique(.$country))&lt;/code&gt;, which was actually the point of the stackoverflow question.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; The modern version uses &lt;code&gt;tidyr::nest()&lt;/code&gt;. Its documentation tells us:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There are many possible ways one could choose to nest columns inside a data frame. &lt;code&gt;nest()&lt;/code&gt; creates a list of data frames containing all the nested variables: this seems to be the most useful form in practice.&lt;/em&gt; Let’s take a closer look at what it does exactly:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;small_pwt %&amp;gt;%
  group_by(country) %&amp;gt;%
  nest() %&amp;gt;%
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##                    country               data
##                      &amp;lt;ord&amp;gt;             &amp;lt;list&amp;gt;
## 1              Switzerland &amp;lt;tibble [65 x 46]&amp;gt;
## 2                  Germany &amp;lt;tibble [65 x 46]&amp;gt;
## 3                   France &amp;lt;tibble [65 x 46]&amp;gt;
## 4                   Greece &amp;lt;tibble [65 x 46]&amp;gt;
## 5               Luxembourg &amp;lt;tibble [65 x 46]&amp;gt;
## 6 United States of America &amp;lt;tibble [65 x 46]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is why I love lists in R; we get a &lt;code&gt;tibble&lt;/code&gt; where each element of the column &lt;code&gt;data&lt;/code&gt; is itself a &lt;code&gt;tibble&lt;/code&gt;. We can now apply any function that we know works on lists.&lt;/p&gt;
&lt;p&gt;What might be surprising though, is the object that is created by this code. Let’s take a look at &lt;code&gt;plots&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(plots)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##                    country               data     plot
##                      &amp;lt;ord&amp;gt;             &amp;lt;list&amp;gt;   &amp;lt;list&amp;gt;
## 1              Switzerland &amp;lt;tibble [65 x 46]&amp;gt; &amp;lt;S3: gg&amp;gt;
## 2                  Germany &amp;lt;tibble [65 x 46]&amp;gt; &amp;lt;S3: gg&amp;gt;
## 3                   France &amp;lt;tibble [65 x 46]&amp;gt; &amp;lt;S3: gg&amp;gt;
## 4                   Greece &amp;lt;tibble [65 x 46]&amp;gt; &amp;lt;S3: gg&amp;gt;
## 5               Luxembourg &amp;lt;tibble [65 x 46]&amp;gt; &amp;lt;S3: gg&amp;gt;
## 6 United States of America &amp;lt;tibble [65 x 46]&amp;gt; &amp;lt;S3: gg&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As &lt;code&gt;dplyr::do()&lt;/code&gt;’s documentation tells us, the return values get stored inside a list. And this is exactly what we get back; a list of plots! Lists are a very flexible and useful class, and you cannot spell &lt;em&gt;list&lt;/em&gt; without &lt;code&gt;purrr&lt;/code&gt; (at least not when you’re a ne&lt;code&gt;R&lt;/code&gt;d).&lt;/p&gt;
&lt;p&gt;Here are the final lines that use &lt;code&gt;purrr::map2()&lt;/code&gt; to save all these plots at once inside your working directory:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: I have changed the code below which does not require your data frame to be ordered according to the variable &lt;code&gt;country_list&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# file_names &amp;lt;- paste0(country_list, &amp;quot;.pdf&amp;quot;)

map2(paste0(plots$country, &amp;quot;.pdf&amp;quot;), plots$plot, ggsave)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said before, if you do not re-order the countries inside the data frame, the names of the files and the plots will not match. Try running all the code without re-ordering, you’ll see!&lt;/p&gt;
&lt;p&gt;I hope you found this post useful. You can follow me on &lt;a href=&#34;https://www.twitter.com/brodriguesco&#34;&gt;twitter&lt;/a&gt; for blog updates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Communication between R and d3js</title>
      <link>/post/2017-09-16-communication-between-r-and-d3js/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-09-16-communication-between-r-and-d3js/</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;In this post we will focus on how to send a message from R to javascript. More precisely, we will focus on the basic keywords and knowledge to integrate a d3.js graph into shiny, just like &lt;a href=&#34;http://51.254.215.145:3838/shiny-fret/&#34;&gt;here&lt;/a&gt;. If you have any issue to make shiny and javascript communicate after reading this post, I suggest you to go back to this simple &lt;a href=&#34;http://shiny.rstudio.com/gallery/server-to-client-custom-messages.html&#34;&gt;shiny app&lt;/a&gt; from Rstudio.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;First of all, create a folder where you will put your data file (&lt;code&gt;.csv&lt;/code&gt;, &lt;code&gt;.txt&lt;/code&gt;, etc..) and your &lt;code&gt;app.R&lt;/code&gt; (or &lt;code&gt;ui.R&lt;/code&gt; and &lt;code&gt;server.R&lt;/code&gt;). In this folder, you will create a new folder that you will name “www”. Put your &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; file inside the &lt;code&gt;www&lt;/code&gt; folder. &lt;br&gt;&lt;br&gt; &lt;img src=&#34;/img/folder_www.png&#34; style = &#34;max-width:100%;&#34;&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;To make R and d3.js communicate, you will have to put some keywords in the server part, the ui part and the &lt;code&gt;.js&lt;/code&gt; file.&lt;br&gt;&lt;br&gt; In the &lt;code&gt;server.R&lt;/code&gt; file, write which data you want to send to javascript in an &lt;code&gt;observe({ })&lt;/code&gt; function. Just like below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(input, output, session) {
    observe({
        dataSendToJs = &amp;quot;Hello World&amp;quot;
        session$sendCustomMessage(type = &amp;#39;nameOfTheMessage&amp;#39;,dataSendToJs)
    })
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;session$sendCustomMessage( )&lt;/code&gt; allows you to send your data from shiny to javascript. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;ui.R&lt;/strong&gt; file, source the javascript document with a tag function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fluidPage(
  titlePanel(&amp;quot;Example&amp;quot;),
  fluidRow(
  #Shiny way to integrate html code in the web page
  tags$head(tags$script(src = &amp;quot;message.js&amp;quot;))
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Your &lt;code&gt;.js&lt;/code&gt; file has to begin with &lt;code&gt;Shiny.addCustomMessageHandler(&amp;quot;nameOfTheMessage&amp;quot;, function(message) {&lt;/code&gt; like in the following example. Don’t forget that the message represents data from R that javascript will read so it’s better to transform the data to json data. You can do it in R via the function &lt;code&gt;jsonlite::toJSON()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Shiny.addCustomMessageHandler(&amp;quot;nameOfTheMessage&amp;quot;,
                                      function(message) {
                                              alert(JSON.stringify(message));
                                      });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should work! You can find the whole process in this repository. We started with something simple but you can do more complex things by applyng the same logic.&lt;/p&gt;
&lt;p&gt;Be careful, if you’re working locally, you have to make some changes: First, you need to have a webserver. I use &lt;a href=&#34;https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=en&#34;&gt;web server for chrome&lt;/a&gt;. If you choose to use the same web server, it’s very simple. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;First, in “CHOOSE FOLDER”, you have to choose the &lt;code&gt;www&lt;/code&gt; folder that you made previously, then a web server url will appear. Click on it, then a new web page with the different files from &lt;code&gt;www&lt;/code&gt; should pop-up.&lt;br&gt;&lt;br&gt; &lt;img src=&#34;/image/webserver_source.png&#34; style = &#34;max-width:100%;&#34;&gt; &lt;br&gt;&lt;br&gt; In &lt;code&gt;ui.R&lt;/code&gt; (or the ui part of your single-file shiny app), source &lt;code&gt;d3.min.js&lt;/code&gt; and all &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#http://127.0.0.1:8887 represents the web server URL
tags$head(tags$script(src = &amp;quot;http://127.0.0.1:8887/d3.min.js&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following video may help you if you have issues to make your application run locally: &lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;https://www.youtube.com/embed/GHRZaiYh2Ac&#34; frameborder=&#34;0&#34; allowfullscreen style = &#34;max-width:100%; height:55vh;&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Now it should work :)&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt; You can see a complete and reproducible example over &lt;a href=&#34;https://github.com/woozaa/fret_Lux&#34;&gt;here&lt;/a&gt;.&lt;br&gt; Don’t hesitate to contact me if you have any comments or suggestions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How tidyeval could make your life easier</title>
      <link>/post/2017-08-27-how-tidyeval-could-make-your-life-easier/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-08-27-how-tidyeval-could-make-your-life-easier/</guid>
      <description>&lt;p&gt;First thing’s first: maybe you shouldn’t care about &lt;code&gt;tidyeval&lt;/code&gt;. Maybe you don’t need it. If you exclusively work interactively, I don’t think that learning about &lt;code&gt;tidyeval&lt;/code&gt; is important. I can only speak for me, and explain to you why I personally find &lt;code&gt;tidyeval&lt;/code&gt; useful.&lt;/p&gt;
&lt;p&gt;I wanted to write this blog post after reading this &lt;a href=&#34;https://twitter.com/dataandme/status/901429535266267136&#34;&gt;twitter thread&lt;/a&gt; and specifically &lt;a href=&#34;https://twitter.com/Kwarizmi/status/901457435948236801&#34;&gt;this question&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/dataandme&#34;&gt;Mara Averick&lt;/a&gt; then wrote &lt;a href=&#34;http://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/&#34;&gt;this blogpost&lt;/a&gt; linking to 6 other blog posts that give some &lt;code&gt;tidyeval&lt;/code&gt; examples. Reading them, plus the &lt;a href=&#34;http://dplyr.tidyverse.org/articles/programming.html&#34;&gt;Programming with dplyr&lt;/a&gt; vignette should help you get started with &lt;code&gt;tidyeval&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But maybe now you know how to use it, but not why and when you should use it… Basically, whenever you want to write a function that looks something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_function(my_data, one_column_inside_data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is when you want to use the power of &lt;code&gt;tidyeval&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I work at &lt;a href=&#34;http://www.statistiques.public.lu/en/index.html&#34;&gt;STATEC&lt;/a&gt;, Luxembourg’s national institute of statistics. I work on all kinds of different projects, and when data gets updated (for example because a new round of data collection for some survey finished), I run my own scripts on the fresh data to make the data nice and tidy for analysis. Because surveys get updated, sometimes column names change a little bit, and this can cause some issues.&lt;/p&gt;
&lt;p&gt;Very recently, a dataset I work with got updated. Data collection was finished, so I just loaded my hombrewed package written for this project, changed the path from last year’s script to this year’s fresh data path, ran the code, and watched as the folders got populated with new &lt;code&gt;ggplot2&lt;/code&gt; graphs and LaTeX tables with descriptive statistics and regression results. This is then used to generate this year’s report. However, by looking at the graphs, I noticed something weird; some graphs were showing some very strange patterns. It turns out that one column got its name changed, and also one of its values got changed too.&lt;/p&gt;
&lt;p&gt;Last year, this column, let’s call it &lt;code&gt;spam&lt;/code&gt;, had values &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;good&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;bad&lt;/code&gt;. This year the column is called &lt;code&gt;Spam&lt;/code&gt; and the values are &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;. When I found out that this was the source of the problem, I just had to change the arguments of my functions from&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;generate_spam_plot(dataset = data2016, column = spam, value = 1)
generate_spam_plot(dataset = data2016, column = spam, value = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;generate_spam_plot(dataset = data2017, column = Spam, value = 1)
generate_spam_plot(dataset = data2017, column = Spam, value = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;without needing to change anything else. This is why I use &lt;code&gt;tidyeval&lt;/code&gt;; without it, writing a function such as &lt;code&gt;genereta_spam_plot&lt;/code&gt; would not be easy. It would be possible, but not easy.&lt;/p&gt;
&lt;p&gt;If you want to know more about &lt;code&gt;tidyeval&lt;/code&gt; and working programmatically with R, I shamelessly invite you to read a book I’ve been working on: &lt;a href=&#34;http://www.brodrigues.co/fput/&#34; class=&#34;uri&#34;&gt;http://www.brodrigues.co/fput/&lt;/a&gt; It’s still a WIP, but maybe you’ll find it useful. I plan on finishing it by the end of the year, but there’s already some content to keep you busy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping data from STATEC&#39;s public tables</title>
      <link>/post/2017-08-21-scraping-data-from-statec-s-public-tables/</link>
      <pubDate>Fri, 21 Apr 2017 06:34:55 +0200</pubDate>
      
      <guid>/post/2017-08-21-scraping-data-from-statec-s-public-tables/</guid>
      <description>&lt;p&gt;A lot of open data is available in Luxembourg’s &lt;a href=&#34;https://data.public.lu/en/&#34;&gt;open data portal&lt;/a&gt;, but sometimes, it is not very easy to download. In the video below, I give you an example of such data and show how you can use &lt;code&gt;rvest&lt;/code&gt; to get the data easily.&lt;/p&gt;
&lt;p&gt;After watching the video, take a look at the code below. This code does two things; first it scrapes the data, and then it puts the data in a tidy format fur further processing.&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;100%&#34; src=&#34;https://youtube.com/embed/902cgrdxZUc&#34; frameborder=&#34;0&#34; allowfullscreen style=&#34;max-width:100%; height:55vh;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;So to summarize the idea of the video; instead of clicking the buttons to download each year’s data (which you would have to do 15 times), it is easier to simple turn off javascript and then scrape the html version of the table. It would be possible, albeit with much more effort, to scrape the tables with javascript enabled, by using a tool such as &lt;a href=&#34;http://phantomjs.org/&#34;&gt;phantomjs&lt;/a&gt;. But since we have the possibility to view the table in html, why not take advantage of it?&lt;/p&gt;
&lt;p&gt;To scrape the data, you will need first to install the &lt;code&gt;rvest&lt;/code&gt; and then load it (and let’s also load the other needed packages)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(dplyr)
library(tidyr)
library(purrr)
library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, using &lt;code&gt;rvest::read_html()&lt;/code&gt;, we can download the whole html page:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;page_unemp &amp;lt;- read_html(&amp;quot;http://www.statistiques.public.lu/stat/TableViewer/tableViewHTML.aspx?ReportId=12950&amp;amp;IF_Language=eng&amp;amp;MainTheme=2&amp;amp;FldrName=3&amp;amp;RFPath=91&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we need to extract the table from the html page, and we do this by using &lt;code&gt;rvest::html_nodes()&lt;/code&gt; and by providing this function with the name of the class of the object we’re interested in, namely, the table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;page_unemp %&amp;gt;%
  html_nodes(&amp;quot;.b2020-datatable&amp;quot;) %&amp;gt;% .[[1]] %&amp;gt;% html_table(fill = TRUE) -&amp;gt; data_raw


head(data_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                          X1                         X2      X3      X4
## 1                      Year                       Year    2001    2002
## 2             Specification                       Year    2001    2002
## 3 Grand Duchy of Luxembourg  Total employed population 180,084 182,004
## 4 Grand Duchy of Luxembourg     of which: Wage-earners 162,407 164,277
## 5 Grand Duchy of Luxembourg of which: Non-wage-earners  17,677  17,727
## 6 Grand Duchy of Luxembourg                 Unemployed   5,393   6,773
##        X5      X6      X7      X8      X9     X10     X11     X12     X13
## 1    2003    2004    2005    2006    2007    2008    2009    2010    2011
## 2    2003    2004    2005    2006    2007    2008    2009    2010    2011
## 3 183,419 186,325 187,380 192,095 197,486 202,203 204,127 207,923 214,094
## 4 165,509 168,214 169,194 174,045 179,176 183,705 185,369 188,983 194,893
## 5  17,910  18,111  18,186  18,050  18,310  18,498  18,758  18,940  19,201
## 6   8,359   9,426  10,653  10,297   9,670  11,496  14,816  15,567  16,159
##       X14     X15     X16     X17      X18
## 1    2012    2013    2014    2015     2016
## 2    2012    2013    2014    2015 Measures
## 3 219,168 223,407 228,423 233,130  236,100
## 4 199,741 203,535 208,238 212,530  215,430
## 5  19,427  19,872  20,185  20,600   20,670
## 6  16,963  19,287  19,362  18,806   18,185&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we got the data in quite a nice format, but it still needs to be cleaned a bit. Let’s do this.&lt;/p&gt;
&lt;p&gt;First, let’s use the first row as the header of the data set and then remove it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(data_raw) &amp;lt;- data_raw[2, ]
colnames(data_raw)[1:2] &amp;lt;- c(&amp;quot;division&amp;quot;, &amp;quot;variable&amp;quot;)
data_raw &amp;lt;- data_raw[-c(1,2), ]
head(data_raw)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    division                   variable    2001    2002
## 3 Grand Duchy of Luxembourg  Total employed population 180,084 182,004
## 4 Grand Duchy of Luxembourg     of which: Wage-earners 162,407 164,277
## 5 Grand Duchy of Luxembourg of which: Non-wage-earners  17,677  17,727
## 6 Grand Duchy of Luxembourg                 Unemployed   5,393   6,773
## 7 Grand Duchy of Luxembourg          Active population 185,477 188,777
## 8 Grand Duchy of Luxembourg   Unemployment rate (in %)    2.91    3.59
##      2003    2004    2005    2006    2007    2008    2009    2010    2011
## 3 183,419 186,325 187,380 192,095 197,486 202,203 204,127 207,923 214,094
## 4 165,509 168,214 169,194 174,045 179,176 183,705 185,369 188,983 194,893
## 5  17,910  18,111  18,186  18,050  18,310  18,498  18,758  18,940  19,201
## 6   8,359   9,426  10,653  10,297   9,670  11,496  14,816  15,567  16,159
## 7 191,778 195,751 198,033 202,392 207,156 213,699 218,943 223,490 230,253
## 8    4.36    4.82    5.38    5.09    4.67    5.38    6.77    6.97    7.02
##      2012    2013    2014    2015 Measures
## 3 219,168 223,407 228,423 233,130  236,100
## 4 199,741 203,535 208,238 212,530  215,430
## 5  19,427  19,872  20,185  20,600   20,670
## 6  16,963  19,287  19,362  18,806   18,185
## 7 236,131 242,694 247,785 251,936  254,285
## 8    7.18    7.95    7.81    7.46     7.15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is starting to look nice, but we need to replace the “,” with “.” and then convert the columns to numeric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_raw %&amp;gt;%
  map_df(function(x)(gsub(&amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;, x = x))) %&amp;gt;%
  mutate_at(vars(matches(&amp;quot;\\d{4}&amp;quot;)), as.numeric
            ) -&amp;gt; clean_unemp

head(clean_unemp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 18
##                    division                   variable  `2001`  `2002`
##                       &amp;lt;chr&amp;gt;                      &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 Grand Duchy of Luxembourg  Total employed population 180.084 182.004
## 2 Grand Duchy of Luxembourg     of which: Wage-earners 162.407 164.277
## 3 Grand Duchy of Luxembourg of which: Non-wage-earners  17.677  17.727
## 4 Grand Duchy of Luxembourg                 Unemployed   5.393   6.773
## 5 Grand Duchy of Luxembourg          Active population 185.477 188.777
## 6 Grand Duchy of Luxembourg   Unemployment rate (in %)   2.910   3.590
## # ... with 14 more variables: `2003` &amp;lt;dbl&amp;gt;, `2004` &amp;lt;dbl&amp;gt;, `2005` &amp;lt;dbl&amp;gt;,
## #   `2006` &amp;lt;dbl&amp;gt;, `2007` &amp;lt;dbl&amp;gt;, `2008` &amp;lt;dbl&amp;gt;, `2009` &amp;lt;dbl&amp;gt;, `2010` &amp;lt;dbl&amp;gt;,
## #   `2011` &amp;lt;dbl&amp;gt;, `2012` &amp;lt;dbl&amp;gt;, `2013` &amp;lt;dbl&amp;gt;, `2014` &amp;lt;dbl&amp;gt;, `2015` &amp;lt;dbl&amp;gt;,
## #   Measures &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This line: &lt;code&gt;map_df(function(x)(gsub(&amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;, x = x)))&lt;/code&gt; calls &lt;code&gt;purrr::map_df()&lt;/code&gt;, which maps a function to each column of a data frame. The function in question is &lt;code&gt;function(x)(gsub(&amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;, x = x))&lt;/code&gt;, which is an anonymous function (meaning it does not have a name) wrapped around &lt;code&gt;gsub&lt;/code&gt;. This function looks for the string “,” and replaces it with “.” in a single column of the data frame. But because we’re mapping this function to all the columns of the data frame with &lt;code&gt;purrr::map_df()&lt;/code&gt;, this substitution happens in each column. We’ not done yet, because these columns are still holding characters. We need to convert each column to a numeric vector and this is what happens in the next line, &lt;code&gt;mutate_at(vars(matches(&amp;quot;\\d{4}&amp;quot;)), as.numeric)&lt;/code&gt;. Each column that contains exactly for digits (hence the &lt;code&gt;&amp;quot;\\d{4}&amp;quot;&lt;/code&gt;) is converted to numeric with &lt;code&gt;dplyr::mutate_at()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, one last step to really have the data in a nice format:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_unemp %&amp;gt;% 
    gather(key=year, value, -division, -variable) %&amp;gt;%
    spread(variable, value) %&amp;gt;%
    clean_names(
           ) -&amp;gt; clean_unemp

head(clean_unemp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   division  year active_population of_which_non_wage_earners
##      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;                     &amp;lt;chr&amp;gt;
## 1 Beaufort  2001               688                        85
## 2 Beaufort  2002               742                        85
## 3 Beaufort  2003               773                        85
## 4 Beaufort  2004               828                        80
## 5 Beaufort  2005               866                        96
## 6 Beaufort  2006               893                        87
## # ... with 4 more variables: of_which_wage_earners &amp;lt;chr&amp;gt;,
## #   total_employed_population &amp;lt;chr&amp;gt;, unemployed &amp;lt;chr&amp;gt;,
## #   unemployment_rate_in_percent &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using &lt;code&gt;tidyr::gather()&lt;/code&gt; and then &lt;code&gt;tidyr::spread()&lt;/code&gt; we get a nice data set where each column is a variable and each row is an observation. I advise you run the above code line by line and try to understand what each function does. We finish by cleaning the names of the variables with &lt;code&gt;janitor::clean_names()&lt;/code&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disclaimer</title>
      <link>/page/disclaimer/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/page/disclaimer/</guid>
      <description>&lt;div class=&#34;container&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;card&#34;&gt;
      &lt;div class=&#34;card-block&#34;&gt;
        &lt;h2 class=&#34;card-title&#34;&gt;Disclaimer&lt;/h2&gt;
      &lt;/div&gt;
      &lt;div class=&#34;card-block&#34;&gt;
        &lt;p class=&#34;card-text&#34;&gt;
          Your disclaimer text here
        &lt;/p&gt;

        &lt;p class=&#34;card-text&#34;&gt;
        NOTE:Some information in this website might be copied from other websites.
          If you see something is your copyright or something should not belong here, please feel free to
          &lt;a href=&#34;mailto:murali@mmrath.com&#34;&gt;contact me&lt;/a&gt;. I will remove necessary parts.
       &lt;/p&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>/page/license/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/page/license/</guid>
      <description>&lt;div class=&#34;container&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;card&#34;&gt;
      &lt;div class=&#34;card-block&#34;&gt;
        &lt;h2 class=&#34;card-title&#34;&gt;LICENSE&lt;/h2&gt;
      &lt;/div&gt;
      &lt;div class=&#34;card-block&#34;&gt;
        &lt;p class=&#34;card-text&#34;&gt;
          Unless otherwise mentioned code from this blog can used as per MIT or Apache 2.0 license.
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/contact/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html class=&#34;no-js&#34;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;
  &lt;title&gt;rdata.lu &lt;/title&gt;
  &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
&lt;meta name=&#34;HandheldFriendly&#34; content=&#34;True&#34;&gt;
&lt;meta name=&#34;MobileOptimized&#34; content=&#34;320&#34;&gt;
&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;


&lt;meta name=&#34;description&#34; content=&#34;Our data science skills added to your project ideas can go far beyond expected levels of success. Hence don&#39;t hesitate to contact us.&#34; /&gt;

&lt;meta name=&#34;keywords&#34; content=&#34;R, Shiny, Visualization, data.lu, Graphics, formations, analysis&#34;&gt;


&lt;meta property=&#34;og:title&#34; content=&#34;rdata.lu &#34;&gt;
&lt;meta property=&#34;og:site_name&#34; content=&#34;rdata.lu&#34;/&gt;
&lt;meta property=&#34;og:url&#34; content=&#34;/&#34; /&gt;
&lt;meta property=&#34;og:locale&#34; content=&#34;en-us&#34;&gt;


&lt;meta property=&#34;og:type&#34; content=&#34;website&#34; /&gt;



&lt;link href=&#34;/index.xml&#34; rel=&#34;alternate&#34; type=&#34;application/rss+xml&#34; title=&#34;rdata.lu&#34; /&gt;

&lt;link rel=&#34;canonical&#34; href=&#34;/&#34; /&gt;

&lt;link rel=&#34;apple-touch-icon-precomposed&#34; sizes=&#34;144x144&#34; href=&#34;/touch-icon-144-precomposed.png&#34;&gt;
&lt;link href=&#34;/favicon.png&#34; rel=&#34;icon&#34;&gt;

&lt;meta name=&#34;generator&#34; content=&#34;Hugo 0.19&#34; /&gt;


  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/bootstrap.min.css&#34;&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/font-awesome.min.css&#34;&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/style.css&#34;&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/tomorrow-night.css&#34;&gt;
  &lt;link href=&#39;//fonts.googleapis.com/css?family=Source+Code+Pro&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&gt;

&lt;/head&gt;
&lt;body class=&#34;bg-light&#34;&gt;
    &lt;link href=&#34;https://fonts.googleapis.com/css?family=Quicksand:300,400,500,700&#34; rel=&#34;stylesheet&#34;&gt;
&lt;link rel=&#34;shortcut icon&#34; href=&#34;/img/favicon.png&#34;&gt;
&lt;nav class=&#34;navbar navbar-expand-md navbar-light blog-header&#34;&gt;
  &lt;div class=&#34;container contt&#34;&gt;
    &lt;a class=&#34;navbar-brand&#34; href=&#34;http://www.rdata.lu/&#34;&gt;&lt;span class=&#34;red&#34;&gt;r&lt;/span&gt;Data&lt;span class=&#34;blue&#34;&gt;.lu&lt;/span&gt;

    &lt;/a&gt;
    &lt;button class=&#34;navbar-toggler&#34; type=&#34;button&#34; data-toggle=&#34;collapse&#34;
        data-target=&#34;#exCollapsingNavbar2&#34;
        aria-controls=&#34;exCollapsingNavbar2&#34; aria-expanded=&#34;false&#34; aria-label=&#34;Toggle navigation&#34;&gt;
      &amp;#9776;
    &lt;/button&gt;
    &lt;div class=&#34;collapse navbar-collapse&#34; id=&#34;exCollapsingNavbar2&#34;&gt;

      &lt;ul class=&#34;nav navbar-nav&#34;&gt;

        &lt;li class=&#34;pull-xs-right&#34;&gt;


          &lt;li class=&#34;nav-item &#34;&gt;
          &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/&#34;&gt;
              &lt;i class=&#39;fa fa-home&#39;&gt;&lt;/i&gt;
              &lt;span&gt;HOME&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt;

        &lt;li class=&#34;nav-item &#34;&gt;
        &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/page/visualization&#34;&gt;
            &lt;i class=&#39;fa fa-pie-chart&#39;&gt;&lt;/i&gt;
            &lt;span&gt;VISUALIZATION&lt;/span&gt;
        &lt;/a&gt;
      &lt;/li&gt;


          &lt;li class=&#34;nav-item &#34;&gt;
          &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/categories/&#34;&gt;
              &lt;i class=&#39;fa fa-folder-open&#39;&gt;&lt;/i&gt;
              &lt;span&gt;CATEGORIES&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt;


          &lt;li class=&#34;nav-item &#34;&gt;
          &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/page/contact&#34;&gt;
              &lt;i class=&#39;fa fa-info-circle&#39;&gt;&lt;/i&gt;
              &lt;span&gt;CONTACT&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt;


          &lt;!-- &lt;li class=&#34;nav-item &#34;&gt;
          &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/page/about-me&#34;&gt;
              &lt;i class=&#39;fa fa-info-circle&#39;&gt;&lt;/i&gt;
              &lt;span&gt;ABOUT US&lt;/span&gt;
          &lt;/a&gt;
        &lt;/li&gt; --&gt;


        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/nav&gt;

&lt;div class=&#34;banner-cont banner-img &#34;&gt;
&lt;/div&gt;
&lt;!-- &lt;img src=&#34;/images/contact.svg&#34; class=&#34;img-banner&#34; alt=&#34;Generic responsive image&#34;&gt; --&gt;

&lt;div id=&#34;main-content&#34; class=&#34;container post-container&#34;&gt;
  &lt;header&gt;
    &lt;div class=&#34;col-xs-12 col-sm-12 col-md-10 col-lg-10&#34;&gt;
      &lt;h1 class=&#34;post-title&#34; &gt; CONTACT
&lt;/h1&gt;
    &lt;/div&gt;
  &lt;/header&gt;
  &lt;div class=&#34;container&#34; id=&#39;viz&#39; &gt;
                            &lt;div class=&#34;row&#34;&gt;
                                    &lt;div class=&#34;col-xs-12 col-sm-12 col-md-10 col-lg-10 colPortfolio&#34;&gt;
                                    &lt;p&gt; &lt;span style=&#34;font-weight: bold;&#34;&gt;Rdata.lu is a Luxembourg based company specializing in data science training and expertise.&lt;/span&gt;&lt;br&gt;
                                      We mainly use R environment to build applications. We collaborate with small and large businesses in different kind of industries.
&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight: bold;&#34;&gt;R is an open source programming language used by more than 70% of the data scientists.&lt;/span&gt;&lt;br&gt;
Easy to use and fast to learn. R is the best way to manipulate data without having to write long code.&lt;/p&gt;
&lt;p&gt;We can add value to your data. Our data science skills added to your project can go far beyond expected levels of success.
&lt;/p&gt;
&lt;h4&gt;Work with us?&lt;/h4&gt;
&lt;p&gt;We would love to help you in your project. We will be pleased to help you to find the best innovative solution adapted to your project needs.
&lt;/p&gt;
&lt;h4&gt;Questions related to R?&lt;/h4&gt;
&lt;p&gt;Please don’t hesitate to contact us.
  &lt;!-- Email us directly at &lt;a href=&#34;mailto:info@rdata.lu&#34;&gt;info@rdata.lu&lt;/a&gt;.&lt;/p&gt; --&gt;

&lt;div class=&#34;col-xs-10 col-sm-10 col-md-8 col-lg-8&#34; id=&#34;mail&#34; &gt;
                  &lt;div class=&#34;info1&#34; &gt;
                    &lt;span class=&#34;fa-stack fa-lg sr-contact&#34;&gt;
                        &lt;i class=&#34;fa fa-circle-thin fa-stack-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fa fa-envelope fa-stack-1x&#34;&gt;&lt;/i&gt;
                      &lt;/span&gt; &lt;a href=&#34;mailto:info@rdata.lu&#34;&gt;info@rdata.lu&lt;/a&gt;
                  &lt;/div&gt;
                  &lt;div class=&#34;info2&#34;&gt;
                    &lt;span class=&#34;fa-stack fa-lg sr-contact&#34;&gt;
                      &lt;i class=&#34;fa fa-mobile-phone fa-stack-2x&#34;&gt;&lt;/i&gt;&lt;/span&gt;  661-89-21-89
                  &lt;/div&gt;

                &lt;/div&gt;


                                            &lt;/div&gt;
                                        &lt;/div&gt;
                                    &lt;/div&gt;
                            &lt;/div&gt;
      &lt;footer class=&#34;footer hidden-print&#34;&gt;
  &lt;div class=&#34;container&#34;&gt;
    &lt;div class=&#34;row&#34;&gt;
      &lt;div class=&#34;col-xs-12 col-md-9&#34;&gt;
        &lt;p class=&#34;text-xs-center m-a-0 p-a-0&#34;&gt;
          © 2017 Copyright © rData.lu. All rights reserved. &lt;br&gt; Content reblogged by &lt;a href=&#34;https://www.r-bloggers.com/&#34; target=&#34;_blank&#34;&gt;R-bloggers&lt;/a&gt;
        &lt;/p&gt;
        &lt;p class=&#34;text-xs-center  m-a-0 p-a-0&#34;&gt;

          &lt;span class=&#34;p-l-1 p-r-1&#34;&gt;
                &lt;a href=&#34;/page/disclaimer/&#34;&gt; &lt;/a&gt;
              &lt;/span&gt;

        &lt;/p&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/footer&gt;
    &lt;script src=&#34;https://code.jquery.com/jquery-3.2.1.slim.min.js&#34; integrity=&#34;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.10.8/umd/popper.min.js&#34; integrity=&#34;sha256-n96swYoYKdVyLr5XatK9CzcdyrpAI0xcSlIeWOZeTAI=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;/assets/js/bootstrap.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/assets/js/highlight.pack.js&#34;&gt;&lt;/script&gt;

&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;


&lt;script id=&#34;dsq-count-scr&#34; src=&#34;//xxxxxx.disqus.com/count.js&#34; async&gt;&lt;/script&gt;


&lt;script src=&#34;/assets/js/script.js&#34;&gt;&lt;/script&gt;


&lt;script&gt;
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga(&#39;create&#39;, &#39;UA-XXXXXXX-1&#39;, &#39;auto&#39;);
ga(&#39;send&#39;, &#39;pageview&#39;);
&lt;/script&gt;
&lt;script async src=&#39;//www.google-analytics.com/analytics.js&#39;&gt;&lt;/script&gt;



  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/page/visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/page/visualization/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html class=&#34;no-js&#34;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;
  &lt;title&gt;rdata.lu &lt;/title&gt;
  &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
  &lt;meta name=&#34;HandheldFriendly&#34; content=&#34;True&#34;&gt;
  &lt;meta name=&#34;MobileOptimized&#34; content=&#34;320&#34;&gt;
  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&gt;


  &lt;meta name=&#34;description&#34; content=&#34;&#34; /&gt;

  &lt;meta name=&#34;keywords&#34; content=&#34;&#34;&gt;


  &lt;meta property=&#34;og:title&#34; content=&#34;rdata.lu &#34;&gt;
  &lt;meta property=&#34;og:site_name&#34; content=&#34;rdata.lu&#34;/&gt;
  &lt;meta property=&#34;og:url&#34; content=&#34;/&#34; /&gt;
  &lt;meta property=&#34;og:locale&#34; content=&#34;en-us&#34;&gt;


  &lt;meta property=&#34;og:type&#34; content=&#34;website&#34; /&gt;



  &lt;link href=&#34;/index.xml&#34; rel=&#34;alternate&#34; type=&#34;application/rss+xml&#34; title=&#34;rdata.lu&#34; /&gt;

  &lt;link rel=&#34;canonical&#34; href=&#34;/&#34; /&gt;

  &lt;link rel=&#34;apple-touch-icon-precomposed&#34; sizes=&#34;144x144&#34; href=&#34;/touch-icon-144-precomposed.png&#34;&gt;
  &lt;link href=&#34;/favicon.png&#34; rel=&#34;icon&#34;&gt;

  &lt;meta name=&#34;generator&#34; content=&#34;Hugo 0.19&#34; /&gt;


  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/bootstrap.min.css&#34;&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/font-awesome.min.css&#34;&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/style.css&#34;&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;/assets/css/tomorrow-night.css&#34;&gt;
  &lt;link href=&#39;//fonts.googleapis.com/css?family=Source+Code+Pro&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&gt;

&lt;/head&gt;
&lt;body class=&#34;bg-light&#34;&gt;
  &lt;link href=&#34;https://fonts.googleapis.com/css?family=Quicksand:300,400,500,700&#34; rel=&#34;stylesheet&#34;&gt;
  &lt;link rel=&#34;shortcut icon&#34; href=&#34;/img/favicon.png&#34;&gt;
  &lt;nav class=&#34;navbar navbar-expand-md navbar-light blog-header&#34;&gt;
    &lt;div class=&#34;container contt&#34;&gt;
      &lt;a class=&#34;navbar-brand&#34; href=&#34;http://www.rdata.lu/&#34;&gt;&lt;span class=&#34;red&#34;&gt;r&lt;/span&gt;Data&lt;span class=&#34;blue&#34;&gt;.lu&lt;/span&gt;

      &lt;/a&gt;
      &lt;button class=&#34;navbar-toggler&#34; type=&#34;button&#34; data-toggle=&#34;collapse&#34;
      data-target=&#34;#exCollapsingNavbar2&#34;
      aria-controls=&#34;exCollapsingNavbar2&#34; aria-expanded=&#34;false&#34; aria-label=&#34;Toggle navigation&#34;&gt;
      &amp;#9776;
    &lt;/button&gt;
    &lt;div class=&#34;collapse navbar-collapse&#34; id=&#34;exCollapsingNavbar2&#34;&gt;

      &lt;ul class=&#34;nav navbar-nav&#34;&gt;

        &lt;li class=&#34;pull-xs-right&#34;&gt;


          &lt;li class=&#34;nav-item &#34;&gt;
            &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/&#34;&gt;
              &lt;i class=&#39;fa fa-home&#39;&gt;&lt;/i&gt;
              &lt;span&gt;HOME&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;

          &lt;li class=&#34;nav-item &#34;&gt;
            &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/page/visualization&#34;&gt;
              &lt;i class=&#39;fa fa-pie-chart&#39;&gt;&lt;/i&gt;
              &lt;span&gt;VISUALIZATION&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;


          &lt;li class=&#34;nav-item &#34;&gt;
            &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/categories/&#34;&gt;
              &lt;i class=&#39;fa fa-folder-open&#39;&gt;&lt;/i&gt;
              &lt;span&gt;CATEGORIES&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;





          &lt;li class=&#34;nav-item &#34;&gt;
            &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/page/contact&#34;&gt;
              &lt;i class=&#39;fa fa-info-circle&#39;&gt;&lt;/i&gt;
              &lt;span&gt;CONTACT&lt;/span&gt;
            &lt;/a&gt;
          &lt;/li&gt;


          &lt;!-- &lt;li class=&#34;nav-item &#34;&gt;
          &lt;a class=&#34;nav-link menu-item&#34; href=&#34;/page/about-me&#34;&gt;
          &lt;i class=&#39;fa fa-info-circle&#39;&gt;&lt;/i&gt;
          &lt;span&gt;ABOUT US&lt;/span&gt;
        &lt;/a&gt;
      &lt;/li&gt; --&gt;


    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/nav&gt;

&lt;div class=&#34;banner-viz banner-img&#34;&gt;
&lt;/div&gt;
&lt;!-- &lt;img src=&#34;/images/webapp.svg&#34; class=&#34;img-banner&#34; alt=&#34;Generic responsive image&#34;&gt; --&gt;

&lt;div id=&#34;main-content&#34; class=&#34;container post-container&#34;&gt;
  &lt;header&gt;
      &lt;div class=&#34;col-xs-12 col-sm-12 col-md-10 col-lg-10&#34;&gt;
        &lt;h1 class=&#34;post-title&#34; &gt;SHINY APPLICATIONS
        &lt;/h1&gt;
    &lt;/div&gt;

  &lt;/header&gt;
  &lt;div class=&#34;container&#34; id=&#39;viz&#39; &gt;
    &lt;div class=&#34;row&#34;&gt;
      &lt;div class=&#34;col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-3 colPortfolio&#34;&gt;
        &lt;div class=&#34;box-item&#34;&gt;
          &lt;figure class=&#34;foot_statFig&#34;&gt;
            &lt;a href=&#34;http://wozametrics.com/visualization/fret&#34; target=&#34;_blank&#34;&gt;
              &lt;img src=&#34;/images/app/dashboard_app.png&#34; alt=&#34;FRET&#34; class=&#34;lazy-loaded&#34;&gt;
            &lt;/a&gt;
          &lt;/figure&gt;
        &lt;/div&gt;
        &lt;div class=&#34;box-info&#34;&gt;
          &lt;div class=&#34;content2&#34;&gt;
            &lt;div class=&#34;title&#34; style=&#34;padding-bottom: 2rem;&#34;&gt;
              &lt;h5&gt;TYPE OF VEHICLES FUEL&lt;/h5&gt; Interactive dashboard to compare the number of vehicles by type of fuel in Luxembourg, 1997-2017.
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&#34;col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-3 colPortfolio&#34;&gt;
        &lt;div class=&#34;box-item&#34;&gt;
          &lt;figure class=&#34;foot_statFig&#34;&gt;
            &lt;a href=&#34;http://wozametrics.com/visualization/steel&#34; target=&#34;_blank&#34;&gt;
              &lt;img src=&#34;/images/app/steel_app.png&#34; alt=&#34;STEEL&#34; class=&#34;lazy-loaded&#34;&gt;
            &lt;/a&gt;
          &lt;/figure&gt;
        &lt;/div&gt;
        &lt;div class=&#34;box-info&#34;&gt;
          &lt;div class=&#34;content2&#34;&gt;
            &lt;div class=&#34;title&#34; style=&#34;padding-bottom: 2rem;&#34;&gt;
              &lt;h5&gt;STEEL TRANSPORTATION&lt;/h5&gt; Animated graph showing the quantity of Luxembourg steel moved by road transportation to a destination country, 1952-2000.
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&#34;col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-3 colPortfolio&#34;&gt;
        &lt;div class=&#34;box-item&#34;&gt;
          &lt;figure class=&#34;foot_statFig&#34;&gt;
            &lt;a href=&#34;http://wozametrics.com/visualization/bubbleHiring/&#34; target=&#34;_blank&#34;&gt;
              &lt;img src=&#34;/images/app/nhiring_app.png&#34; alt=&#34;HIRING&#34; class=&#34;lazy-loaded&#34;&gt;
            &lt;/a&gt;
          &lt;/figure&gt;
        &lt;/div&gt;
        &lt;div class=&#34;box-info&#34;&gt;
          &lt;div class=&#34;content2&#34;&gt;
            &lt;div class=&#34;title&#34; style=&#34;padding-bottom: 2rem;&#34;&gt;
              &lt;h5&gt;FORCE BUBBLES&lt;/h5&gt; Interactive force bubbles graph showing the number of new hirings per nationality (foreign workers) in Luxembourg, 1982-2009.
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&#34;col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-3 colPortfolio&#34;&gt;
        &lt;div class=&#34;box-item&#34;&gt;
          &lt;figure class=&#34;foot_statFig&#34;&gt;
            &lt;a href=&#34;http://www.wozametrics.com/visualization/unemployment/&#34; target=&#34;_blank&#34;&gt;
              &lt;img src=&#34;/images/app/unemp_app.png&#34; alt=&#34;BASIC&#34; class=&#34;lazy-loaded&#34;&gt;
            &lt;/a&gt;
          &lt;/figure&gt;
        &lt;/div&gt;
        &lt;div class=&#34;box-info&#34;&gt;
          &lt;div class=&#34;content2&#34;&gt;
            &lt;div class=&#34;title&#34; style=&#34;padding-bottom: 4rem;&#34;&gt;
              &lt;h5&gt;INTERACTIVE UNEMPLOYMENT MAP&lt;/h5&gt; Interactive map showing the unemployment rate per municipality in Luxembourg, 2001-2015. Municipality Wikipedia pages can be reach by clicking on the map.
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- &lt;div class=&#34;col-xs-12 col-sm-6 col-md-6 col-lg-6 col-xl-3 colPortfolio&#34;&gt;
      &lt;div class=&#34;box-item&#34;&gt;
      &lt;figure class=&#34;foot_statFig&#34;&gt;

      &lt;a href=&#34;http://footstat.eu&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;/images/app/foot_stat_app.png&#34; alt=&#34;BASIC&#34; class=&#34;lazy-loaded&#34;&gt;
    &lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;box-info&#34;&gt;
&lt;div class=&#34;content2&#34;&gt;
&lt;div class=&#34;title&#34;&gt;
&lt;h3&gt;FOOT STAT®&lt;/h3&gt; Soccer application to follow player performances.
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; --&gt;

&lt;/div&gt;

&lt;!-- &lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-md-12&#34; style=&#34;display: inline-flex;&#34;&gt;

&lt;/div&gt;
&lt;/div&gt; --&gt;
&lt;/div&gt;
&lt;header&gt;
    &lt;div class=&#34;col-xs-12 col-sm-12 col-md-10 col-lg-10&#34;&gt;
      &lt;h1 class=&#34;post-title&#34; &gt;WEB APPLICATIONS
      &lt;/h1&gt;
    &lt;/div&gt;

&lt;/header&gt;
&lt;div class=&#34;container&#34; id=&#39;viz&#39; &gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 colPortfolio&#34;&gt;
      &lt;div class=&#34;box-item&#34;&gt;
        &lt;figure class=&#34;foot_statFig&#34;&gt;
          &lt;a href=&#34;http://www.footstat.eu&#34; target=&#34;_blank&#34;&gt;
            &lt;img src=&#34;/images/app/footstat_app.png&#34; alt=&#34;FRET&#34; class=&#34;lazy-loaded&#34;&gt;
          &lt;/a&gt;
        &lt;/figure&gt;
      &lt;/div&gt;
      &lt;div class=&#34;box-info&#34;&gt;
        &lt;div class=&#34;content2&#34;&gt;
          &lt;div class=&#34;title&#34; style=&#34;padding-bottom: 2rem;&#34;&gt;
            &lt;h5&gt;FOOTSTAT&lt;/h5&gt; Follow and compare your favorite player statistics from the 5 biggest championships (Premier League, Liga, Bundesliga, Ligue 1, Serie A).
          &lt;/div&gt;

        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 colPortfolio&#34;&gt;
      &lt;div class=&#34;box-item&#34;&gt;
        &lt;figure class=&#34;foot_statFig&#34;&gt;
          &lt;a href=&#34;http://www.booska-tube.com&#34; target=&#34;_blank&#34;&gt;
            &lt;img src=&#34;/images/app/booska_tube_app.png&#34; alt=&#34;STEEL&#34; class=&#34;lazy-loaded&#34;&gt;
          &lt;/a&gt;
        &lt;/figure&gt;
      &lt;/div&gt;
      &lt;div class=&#34;box-info&#34;&gt;
        &lt;div class=&#34;content2&#34;&gt;
          &lt;div class=&#34;title&#34; style=&#34;padding-bottom: 2rem;&#34;&gt;
            &lt;h5&gt;BOOSKA-TUBE&lt;/h5&gt; Week by week. See which urban singer gets lot of subscriptions or which video clip is getting a lot of views on youtube.
          &lt;/div&gt;

        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;footer class=&#34;footer hidden-print&#34;&gt;
  &lt;div class=&#34;container&#34;&gt;
    &lt;div class=&#34;row&#34;&gt;
      &lt;div class=&#34;col-xs-12 col-md-9&#34;&gt;
        &lt;p class=&#34;text-xs-center m-a-0 p-a-0&#34;&gt;
          © 2017 Copyright © rData.lu. All rights reserved. &lt;br&gt; Content reblogged by &lt;a href=&#34;https://www.r-bloggers.com/&#34; target=&#34;_blank&#34;&gt;R-bloggers&lt;/a&gt;
        &lt;/p&gt;
        &lt;p class=&#34;text-xs-center  m-a-0 p-a-0&#34;&gt;

          &lt;span class=&#34;p-l-1 p-r-1&#34;&gt;
            &lt;a href=&#34;/page/disclaimer/&#34;&gt; &lt;/a&gt;
          &lt;/span&gt;

        &lt;/p&gt;

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/footer&gt;
&lt;script src=&#34;https://code.jquery.com/jquery-3.2.1.slim.min.js&#34; integrity=&#34;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.10.8/umd/popper.min.js&#34; integrity=&#34;sha256-n96swYoYKdVyLr5XatK9CzcdyrpAI0xcSlIeWOZeTAI=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;/assets/js/bootstrap.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/assets/js/highlight.pack.js&#34;&gt;&lt;/script&gt;

&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;


&lt;script id=&#34;dsq-count-scr&#34; src=&#34;//xxxxxx.disqus.com/count.js&#34; async&gt;&lt;/script&gt;


&lt;script src=&#34;/assets/js/script.js&#34;&gt;&lt;/script&gt;


&lt;script&gt;
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga(&#39;create&#39;, &#39;UA-XXXXXXX-1&#39;, &#39;auto&#39;);
ga(&#39;send&#39;, &#39;pageview&#39;);
&lt;/script&gt;
&lt;script async src=&#39;//www.google-analytics.com/analytics.js&#39;&gt;&lt;/script&gt;



&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
  </channel>
</rss>
